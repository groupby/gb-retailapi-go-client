/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the TemplateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateDto{}

// TemplateDto Template to assist the front end application in rendering the UI. Currently only the triggered rule name will be included, or the 'default' template name to indicate no rule was triggered. This is to mainly compatibility with the Searchandiser API and the addition of templates in the future. Template is search agnostic and do not affect search request or result. Templated selected only by triggered rule.
type TemplateDto struct {
	// Name of the template.
	Name *string `json:"name,omitempty"`
	// Name of the rule which may have triggered.
	RuleName *string `json:"ruleName,omitempty"`
	TriggerSet *TemplateDtoTriggerSet `json:"triggerSet,omitempty"`
	// Zones for linked template.
	Zones []ZoneDto `json:"zones,omitempty"`
}

// NewTemplateDto instantiates a new TemplateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateDto() *TemplateDto {
	this := TemplateDto{}
	return &this
}

// NewTemplateDtoWithDefaults instantiates a new TemplateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateDtoWithDefaults() *TemplateDto {
	this := TemplateDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TemplateDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TemplateDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TemplateDto) SetName(v string) {
	o.Name = &v
}

// GetRuleName returns the RuleName field value if set, zero value otherwise.
func (o *TemplateDto) GetRuleName() string {
	if o == nil || IsNil(o.RuleName) {
		var ret string
		return ret
	}
	return *o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDto) GetRuleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RuleName) {
		return nil, false
	}
	return o.RuleName, true
}

// HasRuleName returns a boolean if a field has been set.
func (o *TemplateDto) HasRuleName() bool {
	if o != nil && !IsNil(o.RuleName) {
		return true
	}

	return false
}

// SetRuleName gets a reference to the given string and assigns it to the RuleName field.
func (o *TemplateDto) SetRuleName(v string) {
	o.RuleName = &v
}

// GetTriggerSet returns the TriggerSet field value if set, zero value otherwise.
func (o *TemplateDto) GetTriggerSet() TemplateDtoTriggerSet {
	if o == nil || IsNil(o.TriggerSet) {
		var ret TemplateDtoTriggerSet
		return ret
	}
	return *o.TriggerSet
}

// GetTriggerSetOk returns a tuple with the TriggerSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDto) GetTriggerSetOk() (*TemplateDtoTriggerSet, bool) {
	if o == nil || IsNil(o.TriggerSet) {
		return nil, false
	}
	return o.TriggerSet, true
}

// HasTriggerSet returns a boolean if a field has been set.
func (o *TemplateDto) HasTriggerSet() bool {
	if o != nil && !IsNil(o.TriggerSet) {
		return true
	}

	return false
}

// SetTriggerSet gets a reference to the given TemplateDtoTriggerSet and assigns it to the TriggerSet field.
func (o *TemplateDto) SetTriggerSet(v TemplateDtoTriggerSet) {
	o.TriggerSet = &v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *TemplateDto) GetZones() []ZoneDto {
	if o == nil || IsNil(o.Zones) {
		var ret []ZoneDto
		return ret
	}
	return o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDto) GetZonesOk() ([]ZoneDto, bool) {
	if o == nil || IsNil(o.Zones) {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *TemplateDto) HasZones() bool {
	if o != nil && !IsNil(o.Zones) {
		return true
	}

	return false
}

// SetZones gets a reference to the given []ZoneDto and assigns it to the Zones field.
func (o *TemplateDto) SetZones(v []ZoneDto) {
	o.Zones = v
}

func (o TemplateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RuleName) {
		toSerialize["ruleName"] = o.RuleName
	}
	if !IsNil(o.TriggerSet) {
		toSerialize["triggerSet"] = o.TriggerSet
	}
	if !IsNil(o.Zones) {
		toSerialize["zones"] = o.Zones
	}
	return toSerialize, nil
}

type NullableTemplateDto struct {
	value *TemplateDto
	isSet bool
}

func (v NullableTemplateDto) Get() *TemplateDto {
	return v.value
}

func (v *NullableTemplateDto) Set(val *TemplateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateDto(val *TemplateDto) *NullableTemplateDto {
	return &NullableTemplateDto{value: val, isSet: true}
}

func (v NullableTemplateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


