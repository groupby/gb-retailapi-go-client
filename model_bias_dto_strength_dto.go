/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
	"fmt"
)

// BiasDtoStrengthDto The amount the bias will affect the search results.
type BiasDtoStrengthDto string

// List of BiasDto.StrengthDto
const (
	ABSOLUTE_INCREASE BiasDtoStrengthDto = "ABSOLUTE_INCREASE"
	STRONG_INCREASE BiasDtoStrengthDto = "STRONG_INCREASE"
	MEDIUM_INCREASE BiasDtoStrengthDto = "MEDIUM_INCREASE"
	WEAK_INCREASE BiasDtoStrengthDto = "WEAK_INCREASE"
	LEAVE_UNCHANGED BiasDtoStrengthDto = "LEAVE_UNCHANGED"
	WEAK_DECREASE BiasDtoStrengthDto = "WEAK_DECREASE"
	MEDIUM_DECREASE BiasDtoStrengthDto = "MEDIUM_DECREASE"
	STRONG_DECREASE BiasDtoStrengthDto = "STRONG_DECREASE"
	ABSOLUTE_DECREASE BiasDtoStrengthDto = "ABSOLUTE_DECREASE"
)

// All allowed values of BiasDtoStrengthDto enum
var AllowedBiasDtoStrengthDtoEnumValues = []BiasDtoStrengthDto{
	"ABSOLUTE_INCREASE",
	"STRONG_INCREASE",
	"MEDIUM_INCREASE",
	"WEAK_INCREASE",
	"LEAVE_UNCHANGED",
	"WEAK_DECREASE",
	"MEDIUM_DECREASE",
	"STRONG_DECREASE",
	"ABSOLUTE_DECREASE",
}

func (v *BiasDtoStrengthDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BiasDtoStrengthDto(value)
	for _, existing := range AllowedBiasDtoStrengthDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BiasDtoStrengthDto", value)
}

// NewBiasDtoStrengthDtoFromValue returns a pointer to a valid BiasDtoStrengthDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBiasDtoStrengthDtoFromValue(v string) (*BiasDtoStrengthDto, error) {
	ev := BiasDtoStrengthDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BiasDtoStrengthDto: valid values are %v", v, AllowedBiasDtoStrengthDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BiasDtoStrengthDto) IsValid() bool {
	for _, existing := range AllowedBiasDtoStrengthDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BiasDto.StrengthDto value
func (v BiasDtoStrengthDto) Ptr() *BiasDtoStrengthDto {
	return &v
}

type NullableBiasDtoStrengthDto struct {
	value *BiasDtoStrengthDto
	isSet bool
}

func (v NullableBiasDtoStrengthDto) Get() *BiasDtoStrengthDto {
	return v.value
}

func (v *NullableBiasDtoStrengthDto) Set(val *BiasDtoStrengthDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBiasDtoStrengthDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBiasDtoStrengthDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBiasDtoStrengthDto(val *BiasDtoStrengthDto) *NullableBiasDtoStrengthDto {
	return &NullableBiasDtoStrengthDto{value: val, isSet: true}
}

func (v NullableBiasDtoStrengthDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBiasDtoStrengthDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

