/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the Audience type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Audience{}

// Audience The target group associated with a given audience (e.g. male, veterans, car owners, musicians, etc.) of the product.
type Audience struct {
	// The genders of the audience. Strongly encouraged to use the standard values: 'male', 'female', 'unisex'. At most 5 values are allowed. Length limit of 128 characters.
	Genders []string `json:"genders,omitempty"`
	// The age groups of the audience. Strongly encouraged to use the standard values: 'newborn' (up to 3 months old), 'infant' (3-12 months old), 'toddler' (1-5 years old), 'kids' (5-13 years old), 'adult' (typically teens or older). At most 5 values are allowed. Length limit of 128 characters.
	AgeGroups []string `json:"ageGroups,omitempty"`
}

// NewAudience instantiates a new Audience object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudience() *Audience {
	this := Audience{}
	return &this
}

// NewAudienceWithDefaults instantiates a new Audience object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceWithDefaults() *Audience {
	this := Audience{}
	return &this
}

// GetGenders returns the Genders field value if set, zero value otherwise.
func (o *Audience) GetGenders() []string {
	if o == nil || IsNil(o.Genders) {
		var ret []string
		return ret
	}
	return o.Genders
}

// GetGendersOk returns a tuple with the Genders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audience) GetGendersOk() ([]string, bool) {
	if o == nil || IsNil(o.Genders) {
		return nil, false
	}
	return o.Genders, true
}

// HasGenders returns a boolean if a field has been set.
func (o *Audience) HasGenders() bool {
	if o != nil && !IsNil(o.Genders) {
		return true
	}

	return false
}

// SetGenders gets a reference to the given []string and assigns it to the Genders field.
func (o *Audience) SetGenders(v []string) {
	o.Genders = v
}

// GetAgeGroups returns the AgeGroups field value if set, zero value otherwise.
func (o *Audience) GetAgeGroups() []string {
	if o == nil || IsNil(o.AgeGroups) {
		var ret []string
		return ret
	}
	return o.AgeGroups
}

// GetAgeGroupsOk returns a tuple with the AgeGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Audience) GetAgeGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.AgeGroups) {
		return nil, false
	}
	return o.AgeGroups, true
}

// HasAgeGroups returns a boolean if a field has been set.
func (o *Audience) HasAgeGroups() bool {
	if o != nil && !IsNil(o.AgeGroups) {
		return true
	}

	return false
}

// SetAgeGroups gets a reference to the given []string and assigns it to the AgeGroups field.
func (o *Audience) SetAgeGroups(v []string) {
	o.AgeGroups = v
}

func (o Audience) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Audience) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Genders) {
		toSerialize["genders"] = o.Genders
	}
	if !IsNil(o.AgeGroups) {
		toSerialize["ageGroups"] = o.AgeGroups
	}
	return toSerialize, nil
}

type NullableAudience struct {
	value *Audience
	isSet bool
}

func (v NullableAudience) Get() *Audience {
	return v.value
}

func (v *NullableAudience) Set(val *Audience) {
	v.value = val
	v.isSet = true
}

func (v NullableAudience) IsSet() bool {
	return v.isSet
}

func (v *NullableAudience) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudience(val *Audience) *NullableAudience {
	return &NullableAudience{value: val, isSet: true}
}

func (v NullableAudience) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudience) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


