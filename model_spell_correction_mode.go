/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
	"fmt"
)

// SpellCorrectionMode the model 'SpellCorrectionMode'
type SpellCorrectionMode string

// List of SpellCorrectionMode
const (
	AUTO SpellCorrectionMode = "AUTO"
	SUGGESTION_ONLY SpellCorrectionMode = "SUGGESTION_ONLY"
)

// All allowed values of SpellCorrectionMode enum
var AllowedSpellCorrectionModeEnumValues = []SpellCorrectionMode{
	"AUTO",
	"SUGGESTION_ONLY",
}

func (v *SpellCorrectionMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpellCorrectionMode(value)
	for _, existing := range AllowedSpellCorrectionModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpellCorrectionMode", value)
}

// NewSpellCorrectionModeFromValue returns a pointer to a valid SpellCorrectionMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpellCorrectionModeFromValue(v string) (*SpellCorrectionMode, error) {
	ev := SpellCorrectionMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpellCorrectionMode: valid values are %v", v, AllowedSpellCorrectionModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpellCorrectionMode) IsValid() bool {
	for _, existing := range AllowedSpellCorrectionModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpellCorrectionMode value
func (v SpellCorrectionMode) Ptr() *SpellCorrectionMode {
	return &v
}

type NullableSpellCorrectionMode struct {
	value *SpellCorrectionMode
	isSet bool
}

func (v NullableSpellCorrectionMode) Get() *SpellCorrectionMode {
	return v.value
}

func (v *NullableSpellCorrectionMode) Set(val *SpellCorrectionMode) {
	v.value = val
	v.isSet = true
}

func (v NullableSpellCorrectionMode) IsSet() bool {
	return v.isSet
}

func (v *NullableSpellCorrectionMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpellCorrectionMode(val *SpellCorrectionMode) *NullableSpellCorrectionMode {
	return &NullableSpellCorrectionMode{value: val, isSet: true}
}

func (v NullableSpellCorrectionMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpellCorrectionMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

