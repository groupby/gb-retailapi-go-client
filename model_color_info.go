/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the ColorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColorInfo{}

// ColorInfo Product color info.
type ColorInfo struct {
	// Product color families (array).
	ColorFamilies []string `json:"colorFamilies,omitempty"`
	// Product color (array).
	Colors []string `json:"colors,omitempty"`
}

// NewColorInfo instantiates a new ColorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColorInfo() *ColorInfo {
	this := ColorInfo{}
	return &this
}

// NewColorInfoWithDefaults instantiates a new ColorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorInfoWithDefaults() *ColorInfo {
	this := ColorInfo{}
	return &this
}

// GetColorFamilies returns the ColorFamilies field value if set, zero value otherwise.
func (o *ColorInfo) GetColorFamilies() []string {
	if o == nil || IsNil(o.ColorFamilies) {
		var ret []string
		return ret
	}
	return o.ColorFamilies
}

// GetColorFamiliesOk returns a tuple with the ColorFamilies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorInfo) GetColorFamiliesOk() ([]string, bool) {
	if o == nil || IsNil(o.ColorFamilies) {
		return nil, false
	}
	return o.ColorFamilies, true
}

// HasColorFamilies returns a boolean if a field has been set.
func (o *ColorInfo) HasColorFamilies() bool {
	if o != nil && !IsNil(o.ColorFamilies) {
		return true
	}

	return false
}

// SetColorFamilies gets a reference to the given []string and assigns it to the ColorFamilies field.
func (o *ColorInfo) SetColorFamilies(v []string) {
	o.ColorFamilies = v
}

// GetColors returns the Colors field value if set, zero value otherwise.
func (o *ColorInfo) GetColors() []string {
	if o == nil || IsNil(o.Colors) {
		var ret []string
		return ret
	}
	return o.Colors
}

// GetColorsOk returns a tuple with the Colors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColorInfo) GetColorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Colors) {
		return nil, false
	}
	return o.Colors, true
}

// HasColors returns a boolean if a field has been set.
func (o *ColorInfo) HasColors() bool {
	if o != nil && !IsNil(o.Colors) {
		return true
	}

	return false
}

// SetColors gets a reference to the given []string and assigns it to the Colors field.
func (o *ColorInfo) SetColors(v []string) {
	o.Colors = v
}

func (o ColorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ColorFamilies) {
		toSerialize["colorFamilies"] = o.ColorFamilies
	}
	if !IsNil(o.Colors) {
		toSerialize["colors"] = o.Colors
	}
	return toSerialize, nil
}

type NullableColorInfo struct {
	value *ColorInfo
	isSet bool
}

func (v NullableColorInfo) Get() *ColorInfo {
	return v.value
}

func (v *NullableColorInfo) Set(val *ColorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableColorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableColorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorInfo(val *ColorInfo) *NullableColorInfo {
	return &NullableColorInfo{value: val, isSet: true}
}

func (v NullableColorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


