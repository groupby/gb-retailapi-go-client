/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the NavigationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NavigationDto{}

// NavigationDto Navigation available for the shopper to refine the results on.
type NavigationDto struct {
	// Name of the field the navigation in on.
	Name *string `json:"name,omitempty"`
	// Name of the navigation for display purposes.
	DisplayName *string `json:"displayName,omitempty"`
	Type NavigationTypeDto `json:"type"`
	Refinements []RefinementDto `json:"refinements"`
	// Flag if this navigation supports or queries.
	Or *bool `json:"or,omitempty"`
	Source string `json:"source"`
	Metadata []Metadata `json:"metadata"`
	// Place id for inventory navigations.
	PlaceId string `json:"placeId"`
}

// NewNavigationDto instantiates a new NavigationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNavigationDto(type_ NavigationTypeDto, refinements []RefinementDto, source string, metadata []Metadata, placeId string) *NavigationDto {
	this := NavigationDto{}
	this.Type = type_
	this.Refinements = refinements
	this.Source = source
	this.Metadata = metadata
	this.PlaceId = placeId
	return &this
}

// NewNavigationDtoWithDefaults instantiates a new NavigationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNavigationDtoWithDefaults() *NavigationDto {
	this := NavigationDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NavigationDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NavigationDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NavigationDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NavigationDto) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *NavigationDto) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NavigationDto) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *NavigationDto) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *NavigationDto) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetType returns the Type field value
func (o *NavigationDto) GetType() NavigationTypeDto {
	if o == nil {
		var ret NavigationTypeDto
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NavigationDto) GetTypeOk() (*NavigationTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NavigationDto) SetType(v NavigationTypeDto) {
	o.Type = v
}

// GetRefinements returns the Refinements field value
func (o *NavigationDto) GetRefinements() []RefinementDto {
	if o == nil {
		var ret []RefinementDto
		return ret
	}

	return o.Refinements
}

// GetRefinementsOk returns a tuple with the Refinements field value
// and a boolean to check if the value has been set.
func (o *NavigationDto) GetRefinementsOk() ([]RefinementDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Refinements, true
}

// SetRefinements sets field value
func (o *NavigationDto) SetRefinements(v []RefinementDto) {
	o.Refinements = v
}

// GetOr returns the Or field value if set, zero value otherwise.
func (o *NavigationDto) GetOr() bool {
	if o == nil || IsNil(o.Or) {
		var ret bool
		return ret
	}
	return *o.Or
}

// GetOrOk returns a tuple with the Or field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NavigationDto) GetOrOk() (*bool, bool) {
	if o == nil || IsNil(o.Or) {
		return nil, false
	}
	return o.Or, true
}

// HasOr returns a boolean if a field has been set.
func (o *NavigationDto) HasOr() bool {
	if o != nil && !IsNil(o.Or) {
		return true
	}

	return false
}

// SetOr gets a reference to the given bool and assigns it to the Or field.
func (o *NavigationDto) SetOr(v bool) {
	o.Or = &v
}

// GetSource returns the Source field value
func (o *NavigationDto) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *NavigationDto) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *NavigationDto) SetSource(v string) {
	o.Source = v
}

// GetMetadata returns the Metadata field value
func (o *NavigationDto) GetMetadata() []Metadata {
	if o == nil {
		var ret []Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *NavigationDto) GetMetadataOk() ([]Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *NavigationDto) SetMetadata(v []Metadata) {
	o.Metadata = v
}

// GetPlaceId returns the PlaceId field value
func (o *NavigationDto) GetPlaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlaceId
}

// GetPlaceIdOk returns a tuple with the PlaceId field value
// and a boolean to check if the value has been set.
func (o *NavigationDto) GetPlaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlaceId, true
}

// SetPlaceId sets field value
func (o *NavigationDto) SetPlaceId(v string) {
	o.PlaceId = v
}

func (o NavigationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NavigationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["type"] = o.Type
	toSerialize["refinements"] = o.Refinements
	if !IsNil(o.Or) {
		toSerialize["or"] = o.Or
	}
	toSerialize["source"] = o.Source
	toSerialize["metadata"] = o.Metadata
	toSerialize["placeId"] = o.PlaceId
	return toSerialize, nil
}

type NullableNavigationDto struct {
	value *NavigationDto
	isSet bool
}

func (v NullableNavigationDto) Get() *NavigationDto {
	return v.value
}

func (v *NullableNavigationDto) Set(val *NavigationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableNavigationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableNavigationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNavigationDto(val *NavigationDto) *NullableNavigationDto {
	return &NullableNavigationDto{value: val, isSet: true}
}

func (v NullableNavigationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNavigationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


