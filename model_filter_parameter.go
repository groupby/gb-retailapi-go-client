/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the FilterParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterParameter{}

// FilterParameter struct for FilterParameter
type FilterParameter struct {
	Field string `json:"field"`
	Value NullableString `json:"value,omitempty"`
	Exclude bool `json:"exclude"`
	DerivedFromProduct bool `json:"derivedFromProduct"`
}

// NewFilterParameter instantiates a new FilterParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterParameter(field string, exclude bool, derivedFromProduct bool) *FilterParameter {
	this := FilterParameter{}
	this.Field = field
	this.Exclude = exclude
	this.DerivedFromProduct = derivedFromProduct
	return &this
}

// NewFilterParameterWithDefaults instantiates a new FilterParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterParameterWithDefaults() *FilterParameter {
	this := FilterParameter{}
	return &this
}

// GetField returns the Field field value
func (o *FilterParameter) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *FilterParameter) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *FilterParameter) SetField(v string) {
	o.Field = v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterParameter) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterParameter) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *FilterParameter) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *FilterParameter) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *FilterParameter) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *FilterParameter) UnsetValue() {
	o.Value.Unset()
}

// GetExclude returns the Exclude field value
func (o *FilterParameter) GetExclude() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value
// and a boolean to check if the value has been set.
func (o *FilterParameter) GetExcludeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exclude, true
}

// SetExclude sets field value
func (o *FilterParameter) SetExclude(v bool) {
	o.Exclude = v
}

// GetDerivedFromProduct returns the DerivedFromProduct field value
func (o *FilterParameter) GetDerivedFromProduct() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DerivedFromProduct
}

// GetDerivedFromProductOk returns a tuple with the DerivedFromProduct field value
// and a boolean to check if the value has been set.
func (o *FilterParameter) GetDerivedFromProductOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DerivedFromProduct, true
}

// SetDerivedFromProduct sets field value
func (o *FilterParameter) SetDerivedFromProduct(v bool) {
	o.DerivedFromProduct = v
}

func (o FilterParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	toSerialize["exclude"] = o.Exclude
	toSerialize["derivedFromProduct"] = o.DerivedFromProduct
	return toSerialize, nil
}

type NullableFilterParameter struct {
	value *FilterParameter
	isSet bool
}

func (v NullableFilterParameter) Get() *FilterParameter {
	return v.value
}

func (v *NullableFilterParameter) Set(val *FilterParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterParameter(val *FilterParameter) *NullableFilterParameter {
	return &NullableFilterParameter{value: val, isSet: true}
}

func (v NullableFilterParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


