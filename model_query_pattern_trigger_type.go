/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
	"fmt"
)

// QueryPatternTriggerType the model 'QueryPatternTriggerType'
type QueryPatternTriggerType string

// List of QueryPatternTrigger.Type
const (
	CONTAINS QueryPatternTriggerType = "CONTAINS"
	ENDS_WITH QueryPatternTriggerType = "ENDS_WITH"
	REGEX QueryPatternTriggerType = "REGEX"
	STARTS_WITH QueryPatternTriggerType = "STARTS_WITH"
	MATCHES QueryPatternTriggerType = "MATCHES"
)

// All allowed values of QueryPatternTriggerType enum
var AllowedQueryPatternTriggerTypeEnumValues = []QueryPatternTriggerType{
	"CONTAINS",
	"ENDS_WITH",
	"REGEX",
	"STARTS_WITH",
	"MATCHES",
}

func (v *QueryPatternTriggerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryPatternTriggerType(value)
	for _, existing := range AllowedQueryPatternTriggerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryPatternTriggerType", value)
}

// NewQueryPatternTriggerTypeFromValue returns a pointer to a valid QueryPatternTriggerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryPatternTriggerTypeFromValue(v string) (*QueryPatternTriggerType, error) {
	ev := QueryPatternTriggerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryPatternTriggerType: valid values are %v", v, AllowedQueryPatternTriggerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryPatternTriggerType) IsValid() bool {
	for _, existing := range AllowedQueryPatternTriggerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QueryPatternTrigger.Type value
func (v QueryPatternTriggerType) Ptr() *QueryPatternTriggerType {
	return &v
}

type NullableQueryPatternTriggerType struct {
	value *QueryPatternTriggerType
	isSet bool
}

func (v NullableQueryPatternTriggerType) Get() *QueryPatternTriggerType {
	return v.value
}

func (v *NullableQueryPatternTriggerType) Set(val *QueryPatternTriggerType) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryPatternTriggerType) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryPatternTriggerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryPatternTriggerType(val *QueryPatternTriggerType) *NullableQueryPatternTriggerType {
	return &NullableQueryPatternTriggerType{value: val, isSet: true}
}

func (v NullableQueryPatternTriggerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryPatternTriggerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

