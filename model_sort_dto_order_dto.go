/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
	"fmt"
)

// SortDtoOrderDto Order the products will appear in
type SortDtoOrderDto string

// List of SortDto.OrderDto
const (
	ASCENDING SortDtoOrderDto = "Ascending"
	DESCENDING SortDtoOrderDto = "Descending"
)

// All allowed values of SortDtoOrderDto enum
var AllowedSortDtoOrderDtoEnumValues = []SortDtoOrderDto{
	"Ascending",
	"Descending",
}

func (v *SortDtoOrderDto) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SortDtoOrderDto(value)
	for _, existing := range AllowedSortDtoOrderDtoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SortDtoOrderDto", value)
}

// NewSortDtoOrderDtoFromValue returns a pointer to a valid SortDtoOrderDto
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortDtoOrderDtoFromValue(v string) (*SortDtoOrderDto, error) {
	ev := SortDtoOrderDto(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SortDtoOrderDto: valid values are %v", v, AllowedSortDtoOrderDtoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortDtoOrderDto) IsValid() bool {
	for _, existing := range AllowedSortDtoOrderDtoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SortDto.OrderDto value
func (v SortDtoOrderDto) Ptr() *SortDtoOrderDto {
	return &v
}

type NullableSortDtoOrderDto struct {
	value *SortDtoOrderDto
	isSet bool
}

func (v NullableSortDtoOrderDto) Get() *SortDtoOrderDto {
	return v.value
}

func (v *NullableSortDtoOrderDto) Set(val *SortDtoOrderDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSortDtoOrderDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSortDtoOrderDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortDtoOrderDto(val *SortDtoOrderDto) *NullableSortDtoOrderDto {
	return &NullableSortDtoOrderDto{value: val, isSet: true}
}

func (v NullableSortDtoOrderDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortDtoOrderDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

