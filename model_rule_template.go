/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the RuleTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleTemplate{}

// RuleTemplate struct for RuleTemplate
type RuleTemplate struct {
	Name string `json:"name"`
	EnableExactMatching bool `json:"enableExactMatching"`
	Sections []RuleTemplateSection `json:"sections"`
}

// NewRuleTemplate instantiates a new RuleTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleTemplate(name string, enableExactMatching bool, sections []RuleTemplateSection) *RuleTemplate {
	this := RuleTemplate{}
	this.Name = name
	this.EnableExactMatching = enableExactMatching
	this.Sections = sections
	return &this
}

// NewRuleTemplateWithDefaults instantiates a new RuleTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleTemplateWithDefaults() *RuleTemplate {
	this := RuleTemplate{}
	return &this
}

// GetName returns the Name field value
func (o *RuleTemplate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RuleTemplate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RuleTemplate) SetName(v string) {
	o.Name = v
}

// GetEnableExactMatching returns the EnableExactMatching field value
func (o *RuleTemplate) GetEnableExactMatching() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableExactMatching
}

// GetEnableExactMatchingOk returns a tuple with the EnableExactMatching field value
// and a boolean to check if the value has been set.
func (o *RuleTemplate) GetEnableExactMatchingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableExactMatching, true
}

// SetEnableExactMatching sets field value
func (o *RuleTemplate) SetEnableExactMatching(v bool) {
	o.EnableExactMatching = v
}

// GetSections returns the Sections field value
func (o *RuleTemplate) GetSections() []RuleTemplateSection {
	if o == nil {
		var ret []RuleTemplateSection
		return ret
	}

	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value
// and a boolean to check if the value has been set.
func (o *RuleTemplate) GetSectionsOk() ([]RuleTemplateSection, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sections, true
}

// SetSections sets field value
func (o *RuleTemplate) SetSections(v []RuleTemplateSection) {
	o.Sections = v
}

func (o RuleTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["enableExactMatching"] = o.EnableExactMatching
	toSerialize["sections"] = o.Sections
	return toSerialize, nil
}

type NullableRuleTemplate struct {
	value *RuleTemplate
	isSet bool
}

func (v NullableRuleTemplate) Get() *RuleTemplate {
	return v.value
}

func (v *NullableRuleTemplate) Set(val *RuleTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleTemplate(val *RuleTemplate) *NullableRuleTemplate {
	return &NullableRuleTemplate{value: val, isSet: true}
}

func (v NullableRuleTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


