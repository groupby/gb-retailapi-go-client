/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the ValueFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueFilter{}

// ValueFilter struct for ValueFilter
type ValueFilter struct {
	// Field the value applies to.
	Field string `json:"field"`
	// Value to filter on.
	Value string `json:"value"`
	// Numeric value to filter on.
	NumberValue float64 `json:"numberValue"`
	// Describing whether the filter is negated or not: color that is NOT red.
	Exclude bool `json:"exclude"`
	// Determine which field we need to use - value if 'TEXTUAL' type or numberValue if 'NUMERIC' type.
	Type interface{} `json:"type"`
}

// NewValueFilter instantiates a new ValueFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueFilter(field string, value string, numberValue float64, exclude bool, type_ interface{}) *ValueFilter {
	this := ValueFilter{}
	this.Field = field
	this.Value = value
	this.NumberValue = numberValue
	this.Exclude = exclude
	this.Type = type_
	return &this
}

// NewValueFilterWithDefaults instantiates a new ValueFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueFilterWithDefaults() *ValueFilter {
	this := ValueFilter{}
	return &this
}

// GetField returns the Field field value
func (o *ValueFilter) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *ValueFilter) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *ValueFilter) SetField(v string) {
	o.Field = v
}

// GetValue returns the Value field value
func (o *ValueFilter) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ValueFilter) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ValueFilter) SetValue(v string) {
	o.Value = v
}

// GetNumberValue returns the NumberValue field value
func (o *ValueFilter) GetNumberValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.NumberValue
}

// GetNumberValueOk returns a tuple with the NumberValue field value
// and a boolean to check if the value has been set.
func (o *ValueFilter) GetNumberValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberValue, true
}

// SetNumberValue sets field value
func (o *ValueFilter) SetNumberValue(v float64) {
	o.NumberValue = v
}

// GetExclude returns the Exclude field value
func (o *ValueFilter) GetExclude() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value
// and a boolean to check if the value has been set.
func (o *ValueFilter) GetExcludeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exclude, true
}

// SetExclude sets field value
func (o *ValueFilter) SetExclude(v bool) {
	o.Exclude = v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ValueFilter) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ValueFilter) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ValueFilter) SetType(v interface{}) {
	o.Type = v
}

func (o ValueFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["value"] = o.Value
	toSerialize["numberValue"] = o.NumberValue
	toSerialize["exclude"] = o.Exclude
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableValueFilter struct {
	value *ValueFilter
	isSet bool
}

func (v NullableValueFilter) Get() *ValueFilter {
	return v.value
}

func (v *NullableValueFilter) Set(val *ValueFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableValueFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableValueFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueFilter(val *ValueFilter) *NullableValueFilter {
	return &NullableValueFilter{value: val, isSet: true}
}

func (v NullableValueFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


