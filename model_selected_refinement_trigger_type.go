/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
	"fmt"
)

// SelectedRefinementTriggerType the model 'SelectedRefinementTriggerType'
type SelectedRefinementTriggerType string

// List of SelectedRefinementTrigger.Type
const (
	RANGE SelectedRefinementTriggerType = "RANGE"
	VALUE SelectedRefinementTriggerType = "VALUE"
	NAVIGATION_SELECTED SelectedRefinementTriggerType = "NAVIGATION_SELECTED"
)

// All allowed values of SelectedRefinementTriggerType enum
var AllowedSelectedRefinementTriggerTypeEnumValues = []SelectedRefinementTriggerType{
	"RANGE",
	"VALUE",
	"NAVIGATION_SELECTED",
}

func (v *SelectedRefinementTriggerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SelectedRefinementTriggerType(value)
	for _, existing := range AllowedSelectedRefinementTriggerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SelectedRefinementTriggerType", value)
}

// NewSelectedRefinementTriggerTypeFromValue returns a pointer to a valid SelectedRefinementTriggerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSelectedRefinementTriggerTypeFromValue(v string) (*SelectedRefinementTriggerType, error) {
	ev := SelectedRefinementTriggerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SelectedRefinementTriggerType: valid values are %v", v, AllowedSelectedRefinementTriggerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SelectedRefinementTriggerType) IsValid() bool {
	for _, existing := range AllowedSelectedRefinementTriggerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SelectedRefinementTrigger.Type value
func (v SelectedRefinementTriggerType) Ptr() *SelectedRefinementTriggerType {
	return &v
}

type NullableSelectedRefinementTriggerType struct {
	value *SelectedRefinementTriggerType
	isSet bool
}

func (v NullableSelectedRefinementTriggerType) Get() *SelectedRefinementTriggerType {
	return v.value
}

func (v *NullableSelectedRefinementTriggerType) Set(val *SelectedRefinementTriggerType) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectedRefinementTriggerType) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectedRefinementTriggerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectedRefinementTriggerType(val *SelectedRefinementTriggerType) *NullableSelectedRefinementTriggerType {
	return &NullableSelectedRefinementTriggerType{value: val, isSet: true}
}

func (v NullableSelectedRefinementTriggerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectedRefinementTriggerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

