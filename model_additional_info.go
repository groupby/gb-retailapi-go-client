/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the AdditionalInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdditionalInfo{}

// AdditionalInfo Object which is contains brands and categories associated with this suggestion.
type AdditionalInfo struct {
	Brands []string `json:"brands"`
	Categories []string `json:"categories"`
}

// NewAdditionalInfo instantiates a new AdditionalInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalInfo(brands []string, categories []string) *AdditionalInfo {
	this := AdditionalInfo{}
	this.Brands = brands
	this.Categories = categories
	return &this
}

// NewAdditionalInfoWithDefaults instantiates a new AdditionalInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalInfoWithDefaults() *AdditionalInfo {
	this := AdditionalInfo{}
	return &this
}

// GetBrands returns the Brands field value
func (o *AdditionalInfo) GetBrands() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Brands
}

// GetBrandsOk returns a tuple with the Brands field value
// and a boolean to check if the value has been set.
func (o *AdditionalInfo) GetBrandsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Brands, true
}

// SetBrands sets field value
func (o *AdditionalInfo) SetBrands(v []string) {
	o.Brands = v
}

// GetCategories returns the Categories field value
func (o *AdditionalInfo) GetCategories() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *AdditionalInfo) GetCategoriesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Categories, true
}

// SetCategories sets field value
func (o *AdditionalInfo) SetCategories(v []string) {
	o.Categories = v
}

func (o AdditionalInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdditionalInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["brands"] = o.Brands
	toSerialize["categories"] = o.Categories
	return toSerialize, nil
}

type NullableAdditionalInfo struct {
	value *AdditionalInfo
	isSet bool
}

func (v NullableAdditionalInfo) Get() *AdditionalInfo {
	return v.value
}

func (v *NullableAdditionalInfo) Set(val *AdditionalInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalInfo(val *AdditionalInfo) *NullableAdditionalInfo {
	return &NullableAdditionalInfo{value: val, isSet: true}
}

func (v NullableAdditionalInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


