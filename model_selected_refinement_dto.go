/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the SelectedRefinementDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectedRefinementDto{}

// SelectedRefinementDto Refinement the shopper has selected for filtering.
type SelectedRefinementDto struct {
	// The name of the navigation the refinement is for.
	NavigationName string `json:"navigationName"`
	Type NavigationTypeDto `json:"type"`
	// Value of selected refinement, if type is value.
	Value *string `json:"value,omitempty"`
	// The lowest end or value of the range, if applicable.
	Low *float64 `json:"low,omitempty"`
	// The highest end or value of the range, if applicable.
	High *float64 `json:"high,omitempty"`
	// Field which is indicated that it is dynamic navigation.
	Source *string `json:"source,omitempty"`
	// Navigation multiselect. Indicate that it is possibly to select more than one navigation value due to search request.
	Or *bool `json:"or,omitempty"`
}

// NewSelectedRefinementDto instantiates a new SelectedRefinementDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectedRefinementDto(navigationName string, type_ NavigationTypeDto) *SelectedRefinementDto {
	this := SelectedRefinementDto{}
	this.NavigationName = navigationName
	this.Type = type_
	return &this
}

// NewSelectedRefinementDtoWithDefaults instantiates a new SelectedRefinementDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectedRefinementDtoWithDefaults() *SelectedRefinementDto {
	this := SelectedRefinementDto{}
	return &this
}

// GetNavigationName returns the NavigationName field value
func (o *SelectedRefinementDto) GetNavigationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NavigationName
}

// GetNavigationNameOk returns a tuple with the NavigationName field value
// and a boolean to check if the value has been set.
func (o *SelectedRefinementDto) GetNavigationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NavigationName, true
}

// SetNavigationName sets field value
func (o *SelectedRefinementDto) SetNavigationName(v string) {
	o.NavigationName = v
}

// GetType returns the Type field value
func (o *SelectedRefinementDto) GetType() NavigationTypeDto {
	if o == nil {
		var ret NavigationTypeDto
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SelectedRefinementDto) GetTypeOk() (*NavigationTypeDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SelectedRefinementDto) SetType(v NavigationTypeDto) {
	o.Type = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SelectedRefinementDto) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectedRefinementDto) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SelectedRefinementDto) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SelectedRefinementDto) SetValue(v string) {
	o.Value = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *SelectedRefinementDto) GetLow() float64 {
	if o == nil || IsNil(o.Low) {
		var ret float64
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectedRefinementDto) GetLowOk() (*float64, bool) {
	if o == nil || IsNil(o.Low) {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *SelectedRefinementDto) HasLow() bool {
	if o != nil && !IsNil(o.Low) {
		return true
	}

	return false
}

// SetLow gets a reference to the given float64 and assigns it to the Low field.
func (o *SelectedRefinementDto) SetLow(v float64) {
	o.Low = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *SelectedRefinementDto) GetHigh() float64 {
	if o == nil || IsNil(o.High) {
		var ret float64
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectedRefinementDto) GetHighOk() (*float64, bool) {
	if o == nil || IsNil(o.High) {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *SelectedRefinementDto) HasHigh() bool {
	if o != nil && !IsNil(o.High) {
		return true
	}

	return false
}

// SetHigh gets a reference to the given float64 and assigns it to the High field.
func (o *SelectedRefinementDto) SetHigh(v float64) {
	o.High = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SelectedRefinementDto) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectedRefinementDto) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SelectedRefinementDto) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *SelectedRefinementDto) SetSource(v string) {
	o.Source = &v
}

// GetOr returns the Or field value if set, zero value otherwise.
func (o *SelectedRefinementDto) GetOr() bool {
	if o == nil || IsNil(o.Or) {
		var ret bool
		return ret
	}
	return *o.Or
}

// GetOrOk returns a tuple with the Or field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectedRefinementDto) GetOrOk() (*bool, bool) {
	if o == nil || IsNil(o.Or) {
		return nil, false
	}
	return o.Or, true
}

// HasOr returns a boolean if a field has been set.
func (o *SelectedRefinementDto) HasOr() bool {
	if o != nil && !IsNil(o.Or) {
		return true
	}

	return false
}

// SetOr gets a reference to the given bool and assigns it to the Or field.
func (o *SelectedRefinementDto) SetOr(v bool) {
	o.Or = &v
}

func (o SelectedRefinementDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectedRefinementDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["navigationName"] = o.NavigationName
	toSerialize["type"] = o.Type
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Low) {
		toSerialize["low"] = o.Low
	}
	if !IsNil(o.High) {
		toSerialize["high"] = o.High
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Or) {
		toSerialize["or"] = o.Or
	}
	return toSerialize, nil
}

type NullableSelectedRefinementDto struct {
	value *SelectedRefinementDto
	isSet bool
}

func (v NullableSelectedRefinementDto) Get() *SelectedRefinementDto {
	return v.value
}

func (v *NullableSelectedRefinementDto) Set(val *SelectedRefinementDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectedRefinementDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectedRefinementDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectedRefinementDto(val *SelectedRefinementDto) *NullableSelectedRefinementDto {
	return &NullableSelectedRefinementDto{value: val, isSet: true}
}

func (v NullableSelectedRefinementDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectedRefinementDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


