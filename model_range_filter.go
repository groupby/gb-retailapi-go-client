/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the RangeFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RangeFilter{}

// RangeFilter struct for RangeFilter
type RangeFilter struct {
	// Field the range applies to.
	Field string `json:"field"`
	// Range of values the field value can be.
	Range interface{} `json:"range"`
}

// NewRangeFilter instantiates a new RangeFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangeFilter(field string, range_ interface{}) *RangeFilter {
	this := RangeFilter{}
	this.Field = field
	this.Range = range_
	return &this
}

// NewRangeFilterWithDefaults instantiates a new RangeFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeFilterWithDefaults() *RangeFilter {
	this := RangeFilter{}
	return &this
}

// GetField returns the Field field value
func (o *RangeFilter) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *RangeFilter) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *RangeFilter) SetField(v string) {
	o.Field = v
}

// GetRange returns the Range field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *RangeFilter) GetRange() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Range
}

// GetRangeOk returns a tuple with the Range field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RangeFilter) GetRangeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return &o.Range, true
}

// SetRange sets field value
func (o *RangeFilter) SetRange(v interface{}) {
	o.Range = v
}

func (o RangeFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RangeFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	if o.Range != nil {
		toSerialize["range"] = o.Range
	}
	return toSerialize, nil
}

type NullableRangeFilter struct {
	value *RangeFilter
	isSet bool
}

func (v NullableRangeFilter) Get() *RangeFilter {
	return v.value
}

func (v *NullableRangeFilter) Set(val *RangeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeFilter(val *RangeFilter) *NullableRangeFilter {
	return &NullableRangeFilter{value: val, isSet: true}
}

func (v NullableRangeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


