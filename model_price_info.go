/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the PriceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceInfo{}

// PriceInfo Price info representation.
type PriceInfo struct {
	// Currency code.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Price value.
	Price *float32 `json:"price,omitempty"`
	// Original price value.
	OriginalPrice *float32 `json:"originalPrice,omitempty"`
	// Cost
	Cost *float32 `json:"cost,omitempty"`
	PriceEffectiveTime *PriceInfoPriceEffectiveTime `json:"priceEffectiveTime,omitempty"`
	PriceExpireTime *PriceInfoPriceExpireTime `json:"priceExpireTime,omitempty"`
	PriceRange *PriceInfoPriceRange `json:"priceRange,omitempty"`
}

// NewPriceInfo instantiates a new PriceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceInfo() *PriceInfo {
	this := PriceInfo{}
	return &this
}

// NewPriceInfoWithDefaults instantiates a new PriceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceInfoWithDefaults() *PriceInfo {
	this := PriceInfo{}
	return &this
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *PriceInfo) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceInfo) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *PriceInfo) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *PriceInfo) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PriceInfo) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceInfo) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PriceInfo) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *PriceInfo) SetPrice(v float32) {
	o.Price = &v
}

// GetOriginalPrice returns the OriginalPrice field value if set, zero value otherwise.
func (o *PriceInfo) GetOriginalPrice() float32 {
	if o == nil || IsNil(o.OriginalPrice) {
		var ret float32
		return ret
	}
	return *o.OriginalPrice
}

// GetOriginalPriceOk returns a tuple with the OriginalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceInfo) GetOriginalPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.OriginalPrice) {
		return nil, false
	}
	return o.OriginalPrice, true
}

// HasOriginalPrice returns a boolean if a field has been set.
func (o *PriceInfo) HasOriginalPrice() bool {
	if o != nil && !IsNil(o.OriginalPrice) {
		return true
	}

	return false
}

// SetOriginalPrice gets a reference to the given float32 and assigns it to the OriginalPrice field.
func (o *PriceInfo) SetOriginalPrice(v float32) {
	o.OriginalPrice = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *PriceInfo) GetCost() float32 {
	if o == nil || IsNil(o.Cost) {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceInfo) GetCostOk() (*float32, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *PriceInfo) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *PriceInfo) SetCost(v float32) {
	o.Cost = &v
}

// GetPriceEffectiveTime returns the PriceEffectiveTime field value if set, zero value otherwise.
func (o *PriceInfo) GetPriceEffectiveTime() PriceInfoPriceEffectiveTime {
	if o == nil || IsNil(o.PriceEffectiveTime) {
		var ret PriceInfoPriceEffectiveTime
		return ret
	}
	return *o.PriceEffectiveTime
}

// GetPriceEffectiveTimeOk returns a tuple with the PriceEffectiveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceInfo) GetPriceEffectiveTimeOk() (*PriceInfoPriceEffectiveTime, bool) {
	if o == nil || IsNil(o.PriceEffectiveTime) {
		return nil, false
	}
	return o.PriceEffectiveTime, true
}

// HasPriceEffectiveTime returns a boolean if a field has been set.
func (o *PriceInfo) HasPriceEffectiveTime() bool {
	if o != nil && !IsNil(o.PriceEffectiveTime) {
		return true
	}

	return false
}

// SetPriceEffectiveTime gets a reference to the given PriceInfoPriceEffectiveTime and assigns it to the PriceEffectiveTime field.
func (o *PriceInfo) SetPriceEffectiveTime(v PriceInfoPriceEffectiveTime) {
	o.PriceEffectiveTime = &v
}

// GetPriceExpireTime returns the PriceExpireTime field value if set, zero value otherwise.
func (o *PriceInfo) GetPriceExpireTime() PriceInfoPriceExpireTime {
	if o == nil || IsNil(o.PriceExpireTime) {
		var ret PriceInfoPriceExpireTime
		return ret
	}
	return *o.PriceExpireTime
}

// GetPriceExpireTimeOk returns a tuple with the PriceExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceInfo) GetPriceExpireTimeOk() (*PriceInfoPriceExpireTime, bool) {
	if o == nil || IsNil(o.PriceExpireTime) {
		return nil, false
	}
	return o.PriceExpireTime, true
}

// HasPriceExpireTime returns a boolean if a field has been set.
func (o *PriceInfo) HasPriceExpireTime() bool {
	if o != nil && !IsNil(o.PriceExpireTime) {
		return true
	}

	return false
}

// SetPriceExpireTime gets a reference to the given PriceInfoPriceExpireTime and assigns it to the PriceExpireTime field.
func (o *PriceInfo) SetPriceExpireTime(v PriceInfoPriceExpireTime) {
	o.PriceExpireTime = &v
}

// GetPriceRange returns the PriceRange field value if set, zero value otherwise.
func (o *PriceInfo) GetPriceRange() PriceInfoPriceRange {
	if o == nil || IsNil(o.PriceRange) {
		var ret PriceInfoPriceRange
		return ret
	}
	return *o.PriceRange
}

// GetPriceRangeOk returns a tuple with the PriceRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceInfo) GetPriceRangeOk() (*PriceInfoPriceRange, bool) {
	if o == nil || IsNil(o.PriceRange) {
		return nil, false
	}
	return o.PriceRange, true
}

// HasPriceRange returns a boolean if a field has been set.
func (o *PriceInfo) HasPriceRange() bool {
	if o != nil && !IsNil(o.PriceRange) {
		return true
	}

	return false
}

// SetPriceRange gets a reference to the given PriceInfoPriceRange and assigns it to the PriceRange field.
func (o *PriceInfo) SetPriceRange(v PriceInfoPriceRange) {
	o.PriceRange = &v
}

func (o PriceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.OriginalPrice) {
		toSerialize["originalPrice"] = o.OriginalPrice
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.PriceEffectiveTime) {
		toSerialize["priceEffectiveTime"] = o.PriceEffectiveTime
	}
	if !IsNil(o.PriceExpireTime) {
		toSerialize["priceExpireTime"] = o.PriceExpireTime
	}
	if !IsNil(o.PriceRange) {
		toSerialize["priceRange"] = o.PriceRange
	}
	return toSerialize, nil
}

type NullablePriceInfo struct {
	value *PriceInfo
	isSet bool
}

func (v NullablePriceInfo) Get() *PriceInfo {
	return v.value
}

func (v *NullablePriceInfo) Set(val *PriceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceInfo(val *PriceInfo) *NullablePriceInfo {
	return &NullablePriceInfo{value: val, isSet: true}
}

func (v NullablePriceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


