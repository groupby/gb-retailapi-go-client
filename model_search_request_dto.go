/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the SearchRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchRequestDto{}

// SearchRequestDto Request that should be populated to configure a search API call, made by the client on behalf of a shopper.
type SearchRequestDto struct {
	// Base textual search query.
	Query NullableString `json:"query,omitempty"`
	// Area name the search is being performed in.
	Area NullableString `json:"area,omitempty"`
	// Name of collection in project configuration setting which is mapped to the google retail backend.
	Collection NullableString `json:"collection,omitempty"`
	// Unique identifier identifying the shopper. Will be autogenerated if not provided.
	VisitorId NullableString `json:"visitorId,omitempty"`
	Refinements []SelectedRefinementDto `json:"refinements"`
	// The number of products to be returned on each page.
	PageSize NullableInt32 `json:"pageSize,omitempty"`
	// Where in the list of products to begin the page.
	Skip NullableInt64 `json:"skip,omitempty"`
	// Name of a biasing profile which should be applied to the search. Takes priority over area default.
	BiasingProfile NullableString `json:"biasingProfile,omitempty"`
	Biasing NullableBiasingProfileDto `json:"biasing"`
	CustomUrlParams []CustomParameterDto `json:"customUrlParams"`
	Sorts []SortDto `json:"sorts"`
	// Set of navigation fields to include in the search result. Cannot be set if 'excludedNavigations' is set.
	IncludedNavigations []string `json:"includedNavigations,omitempty"`
	// Set of navigation fields to exclude in the search result. Cannot be set if 'includedNavigations' is set.
	ExcludedNavigations []string `json:"excludedNavigations,omitempty"`
	// Set the specifications of dynamically generated facets.
	DynamicFacet NullableBool `json:"dynamicFacet,omitempty"`
	// Set the variant rollup keys.
	VariantRollupKeys []string `json:"variantRollupKeys,omitempty"`
	// Set of the prefilter specifications value.
	PreFilter NullableString `json:"preFilter,omitempty"`
	// Name of site filter. If not specified, the specified area's default site will be applied if configured in Command Center. To not use default specify empty value i.e.\"\".  If the site doesn't exist then the search will execute without the site filter and a warning will be provided.
	Site NullableString `json:"site,omitempty"`
	// List with fields which should be included in metadata object associated with each record in response.
	ResponseMask []string `json:"responseMask,omitempty"`
	// The categories associated with a category page. Required for category navigation queries to achieve good search quality. To represent full path of category, use '>' sign to separate different hierarchies. If '>' is part of the category name, please replace it with other character(s).Max item length = 1.
	PageCategories []string `json:"pageCategories,omitempty"`
	SpellCorrectionMode NullableSpellCorrectionMode `json:"spellCorrectionMode,omitempty"`
	// When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search \"Google Pixel 5\" without query expansion, you might only get \"google_pixel_5\" in the result. With query expansion, you might get \"google_pixel_4a_with_5g\", \"google_pixel_4a\" and \"google_pixel_5_case\" as well.The default value is configured in the tenant settings or true if there is no such setting
	IncludeExpandedResults NullableBool `json:"includeExpandedResults,omitempty"`
	// This configuration depends on include expanded results settings. If this field is set to true,unexpanded products are always at the top of the search results, followed  by the expanded results. Default value: true
	PinUnexpandedResults NullableBool `json:"pinUnexpandedResults,omitempty"`
	// Enable additional debug info in response.  Note: attaching debug info significantly affects performance. Is not supposed to be used for large requests.  
	Debug NullableBool `json:"debug,omitempty"`
	// Maximum of facet values that should be returned for this facet. If not specified, defaults to 20. The maximum allowed value is 300. Values above 300 will be coerced to 300.  If this field is negative, an INVALID_ARGUMENT is returned.  This limit (300) is configured on Google side, but Google have an ability to change it for specific project. 
	FacetLimit NullableInt32 `json:"facetLimit,omitempty"`
	// Highly recommended for logged-in users. Unique identifier for logged-in user, such as a user name. Don't set for anonymous users.  Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality.  The field must be a UTF-8 encoded string with a length limit of 128 characters. 
	LoginId NullableString `json:"loginId,omitempty"`
	Overwrites NullableSearchRequestDtoOverwrites `json:"overwrites,omitempty"`
}

// NewSearchRequestDto instantiates a new SearchRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRequestDto(refinements []SelectedRefinementDto, biasing NullableBiasingProfileDto, customUrlParams []CustomParameterDto, sorts []SortDto) *SearchRequestDto {
	this := SearchRequestDto{}
	var area string = "Production"
	this.Area = *NewNullableString(&area)
	var collection string = "default"
	this.Collection = *NewNullableString(&collection)
	this.Refinements = refinements
	var pageSize int32 = 10
	this.PageSize = *NewNullableInt32(&pageSize)
	var skip int64 = 0
	this.Skip = *NewNullableInt64(&skip)
	this.Biasing = biasing
	this.CustomUrlParams = customUrlParams
	this.Sorts = sorts
	return &this
}

// NewSearchRequestDtoWithDefaults instantiates a new SearchRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRequestDtoWithDefaults() *SearchRequestDto {
	this := SearchRequestDto{}
	var area string = "Production"
	this.Area = *NewNullableString(&area)
	var collection string = "default"
	this.Collection = *NewNullableString(&collection)
	var pageSize int32 = 10
	this.PageSize = *NewNullableInt32(&pageSize)
	var skip int64 = 0
	this.Skip = *NewNullableInt64(&skip)
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetQuery() string {
	if o == nil || IsNil(o.Query.Get()) {
		var ret string
		return ret
	}
	return *o.Query.Get()
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Query.Get(), o.Query.IsSet()
}

// HasQuery returns a boolean if a field has been set.
func (o *SearchRequestDto) HasQuery() bool {
	if o != nil && o.Query.IsSet() {
		return true
	}

	return false
}

// SetQuery gets a reference to the given NullableString and assigns it to the Query field.
func (o *SearchRequestDto) SetQuery(v string) {
	o.Query.Set(&v)
}
// SetQueryNil sets the value for Query to be an explicit nil
func (o *SearchRequestDto) SetQueryNil() {
	o.Query.Set(nil)
}

// UnsetQuery ensures that no value is present for Query, not even an explicit nil
func (o *SearchRequestDto) UnsetQuery() {
	o.Query.Unset()
}

// GetArea returns the Area field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetArea() string {
	if o == nil || IsNil(o.Area.Get()) {
		var ret string
		return ret
	}
	return *o.Area.Get()
}

// GetAreaOk returns a tuple with the Area field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetAreaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Area.Get(), o.Area.IsSet()
}

// HasArea returns a boolean if a field has been set.
func (o *SearchRequestDto) HasArea() bool {
	if o != nil && o.Area.IsSet() {
		return true
	}

	return false
}

// SetArea gets a reference to the given NullableString and assigns it to the Area field.
func (o *SearchRequestDto) SetArea(v string) {
	o.Area.Set(&v)
}
// SetAreaNil sets the value for Area to be an explicit nil
func (o *SearchRequestDto) SetAreaNil() {
	o.Area.Set(nil)
}

// UnsetArea ensures that no value is present for Area, not even an explicit nil
func (o *SearchRequestDto) UnsetArea() {
	o.Area.Unset()
}

// GetCollection returns the Collection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetCollection() string {
	if o == nil || IsNil(o.Collection.Get()) {
		var ret string
		return ret
	}
	return *o.Collection.Get()
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetCollectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Collection.Get(), o.Collection.IsSet()
}

// HasCollection returns a boolean if a field has been set.
func (o *SearchRequestDto) HasCollection() bool {
	if o != nil && o.Collection.IsSet() {
		return true
	}

	return false
}

// SetCollection gets a reference to the given NullableString and assigns it to the Collection field.
func (o *SearchRequestDto) SetCollection(v string) {
	o.Collection.Set(&v)
}
// SetCollectionNil sets the value for Collection to be an explicit nil
func (o *SearchRequestDto) SetCollectionNil() {
	o.Collection.Set(nil)
}

// UnsetCollection ensures that no value is present for Collection, not even an explicit nil
func (o *SearchRequestDto) UnsetCollection() {
	o.Collection.Unset()
}

// GetVisitorId returns the VisitorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetVisitorId() string {
	if o == nil || IsNil(o.VisitorId.Get()) {
		var ret string
		return ret
	}
	return *o.VisitorId.Get()
}

// GetVisitorIdOk returns a tuple with the VisitorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetVisitorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VisitorId.Get(), o.VisitorId.IsSet()
}

// HasVisitorId returns a boolean if a field has been set.
func (o *SearchRequestDto) HasVisitorId() bool {
	if o != nil && o.VisitorId.IsSet() {
		return true
	}

	return false
}

// SetVisitorId gets a reference to the given NullableString and assigns it to the VisitorId field.
func (o *SearchRequestDto) SetVisitorId(v string) {
	o.VisitorId.Set(&v)
}
// SetVisitorIdNil sets the value for VisitorId to be an explicit nil
func (o *SearchRequestDto) SetVisitorIdNil() {
	o.VisitorId.Set(nil)
}

// UnsetVisitorId ensures that no value is present for VisitorId, not even an explicit nil
func (o *SearchRequestDto) UnsetVisitorId() {
	o.VisitorId.Unset()
}

// GetRefinements returns the Refinements field value
func (o *SearchRequestDto) GetRefinements() []SelectedRefinementDto {
	if o == nil {
		var ret []SelectedRefinementDto
		return ret
	}

	return o.Refinements
}

// GetRefinementsOk returns a tuple with the Refinements field value
// and a boolean to check if the value has been set.
func (o *SearchRequestDto) GetRefinementsOk() ([]SelectedRefinementDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Refinements, true
}

// SetRefinements sets field value
func (o *SearchRequestDto) SetRefinements(v []SelectedRefinementDto) {
	o.Refinements = v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetPageSize() int32 {
	if o == nil || IsNil(o.PageSize.Get()) {
		var ret int32
		return ret
	}
	return *o.PageSize.Get()
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetPageSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PageSize.Get(), o.PageSize.IsSet()
}

// HasPageSize returns a boolean if a field has been set.
func (o *SearchRequestDto) HasPageSize() bool {
	if o != nil && o.PageSize.IsSet() {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given NullableInt32 and assigns it to the PageSize field.
func (o *SearchRequestDto) SetPageSize(v int32) {
	o.PageSize.Set(&v)
}
// SetPageSizeNil sets the value for PageSize to be an explicit nil
func (o *SearchRequestDto) SetPageSizeNil() {
	o.PageSize.Set(nil)
}

// UnsetPageSize ensures that no value is present for PageSize, not even an explicit nil
func (o *SearchRequestDto) UnsetPageSize() {
	o.PageSize.Unset()
}

// GetSkip returns the Skip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetSkip() int64 {
	if o == nil || IsNil(o.Skip.Get()) {
		var ret int64
		return ret
	}
	return *o.Skip.Get()
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetSkipOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Skip.Get(), o.Skip.IsSet()
}

// HasSkip returns a boolean if a field has been set.
func (o *SearchRequestDto) HasSkip() bool {
	if o != nil && o.Skip.IsSet() {
		return true
	}

	return false
}

// SetSkip gets a reference to the given NullableInt64 and assigns it to the Skip field.
func (o *SearchRequestDto) SetSkip(v int64) {
	o.Skip.Set(&v)
}
// SetSkipNil sets the value for Skip to be an explicit nil
func (o *SearchRequestDto) SetSkipNil() {
	o.Skip.Set(nil)
}

// UnsetSkip ensures that no value is present for Skip, not even an explicit nil
func (o *SearchRequestDto) UnsetSkip() {
	o.Skip.Unset()
}

// GetBiasingProfile returns the BiasingProfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetBiasingProfile() string {
	if o == nil || IsNil(o.BiasingProfile.Get()) {
		var ret string
		return ret
	}
	return *o.BiasingProfile.Get()
}

// GetBiasingProfileOk returns a tuple with the BiasingProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetBiasingProfileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BiasingProfile.Get(), o.BiasingProfile.IsSet()
}

// HasBiasingProfile returns a boolean if a field has been set.
func (o *SearchRequestDto) HasBiasingProfile() bool {
	if o != nil && o.BiasingProfile.IsSet() {
		return true
	}

	return false
}

// SetBiasingProfile gets a reference to the given NullableString and assigns it to the BiasingProfile field.
func (o *SearchRequestDto) SetBiasingProfile(v string) {
	o.BiasingProfile.Set(&v)
}
// SetBiasingProfileNil sets the value for BiasingProfile to be an explicit nil
func (o *SearchRequestDto) SetBiasingProfileNil() {
	o.BiasingProfile.Set(nil)
}

// UnsetBiasingProfile ensures that no value is present for BiasingProfile, not even an explicit nil
func (o *SearchRequestDto) UnsetBiasingProfile() {
	o.BiasingProfile.Unset()
}

// GetBiasing returns the Biasing field value
// If the value is explicit nil, the zero value for BiasingProfileDto will be returned
func (o *SearchRequestDto) GetBiasing() BiasingProfileDto {
	if o == nil || o.Biasing.Get() == nil {
		var ret BiasingProfileDto
		return ret
	}

	return *o.Biasing.Get()
}

// GetBiasingOk returns a tuple with the Biasing field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetBiasingOk() (*BiasingProfileDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Biasing.Get(), o.Biasing.IsSet()
}

// SetBiasing sets field value
func (o *SearchRequestDto) SetBiasing(v BiasingProfileDto) {
	o.Biasing.Set(&v)
}

// GetCustomUrlParams returns the CustomUrlParams field value
func (o *SearchRequestDto) GetCustomUrlParams() []CustomParameterDto {
	if o == nil {
		var ret []CustomParameterDto
		return ret
	}

	return o.CustomUrlParams
}

// GetCustomUrlParamsOk returns a tuple with the CustomUrlParams field value
// and a boolean to check if the value has been set.
func (o *SearchRequestDto) GetCustomUrlParamsOk() ([]CustomParameterDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomUrlParams, true
}

// SetCustomUrlParams sets field value
func (o *SearchRequestDto) SetCustomUrlParams(v []CustomParameterDto) {
	o.CustomUrlParams = v
}

// GetSorts returns the Sorts field value
func (o *SearchRequestDto) GetSorts() []SortDto {
	if o == nil {
		var ret []SortDto
		return ret
	}

	return o.Sorts
}

// GetSortsOk returns a tuple with the Sorts field value
// and a boolean to check if the value has been set.
func (o *SearchRequestDto) GetSortsOk() ([]SortDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sorts, true
}

// SetSorts sets field value
func (o *SearchRequestDto) SetSorts(v []SortDto) {
	o.Sorts = v
}

// GetIncludedNavigations returns the IncludedNavigations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetIncludedNavigations() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IncludedNavigations
}

// GetIncludedNavigationsOk returns a tuple with the IncludedNavigations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetIncludedNavigationsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedNavigations) {
		return nil, false
	}
	return o.IncludedNavigations, true
}

// HasIncludedNavigations returns a boolean if a field has been set.
func (o *SearchRequestDto) HasIncludedNavigations() bool {
	if o != nil && IsNil(o.IncludedNavigations) {
		return true
	}

	return false
}

// SetIncludedNavigations gets a reference to the given []string and assigns it to the IncludedNavigations field.
func (o *SearchRequestDto) SetIncludedNavigations(v []string) {
	o.IncludedNavigations = v
}

// GetExcludedNavigations returns the ExcludedNavigations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetExcludedNavigations() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludedNavigations
}

// GetExcludedNavigationsOk returns a tuple with the ExcludedNavigations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetExcludedNavigationsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedNavigations) {
		return nil, false
	}
	return o.ExcludedNavigations, true
}

// HasExcludedNavigations returns a boolean if a field has been set.
func (o *SearchRequestDto) HasExcludedNavigations() bool {
	if o != nil && IsNil(o.ExcludedNavigations) {
		return true
	}

	return false
}

// SetExcludedNavigations gets a reference to the given []string and assigns it to the ExcludedNavigations field.
func (o *SearchRequestDto) SetExcludedNavigations(v []string) {
	o.ExcludedNavigations = v
}

// GetDynamicFacet returns the DynamicFacet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetDynamicFacet() bool {
	if o == nil || IsNil(o.DynamicFacet.Get()) {
		var ret bool
		return ret
	}
	return *o.DynamicFacet.Get()
}

// GetDynamicFacetOk returns a tuple with the DynamicFacet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetDynamicFacetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DynamicFacet.Get(), o.DynamicFacet.IsSet()
}

// HasDynamicFacet returns a boolean if a field has been set.
func (o *SearchRequestDto) HasDynamicFacet() bool {
	if o != nil && o.DynamicFacet.IsSet() {
		return true
	}

	return false
}

// SetDynamicFacet gets a reference to the given NullableBool and assigns it to the DynamicFacet field.
func (o *SearchRequestDto) SetDynamicFacet(v bool) {
	o.DynamicFacet.Set(&v)
}
// SetDynamicFacetNil sets the value for DynamicFacet to be an explicit nil
func (o *SearchRequestDto) SetDynamicFacetNil() {
	o.DynamicFacet.Set(nil)
}

// UnsetDynamicFacet ensures that no value is present for DynamicFacet, not even an explicit nil
func (o *SearchRequestDto) UnsetDynamicFacet() {
	o.DynamicFacet.Unset()
}

// GetVariantRollupKeys returns the VariantRollupKeys field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetVariantRollupKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.VariantRollupKeys
}

// GetVariantRollupKeysOk returns a tuple with the VariantRollupKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetVariantRollupKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.VariantRollupKeys) {
		return nil, false
	}
	return o.VariantRollupKeys, true
}

// HasVariantRollupKeys returns a boolean if a field has been set.
func (o *SearchRequestDto) HasVariantRollupKeys() bool {
	if o != nil && IsNil(o.VariantRollupKeys) {
		return true
	}

	return false
}

// SetVariantRollupKeys gets a reference to the given []string and assigns it to the VariantRollupKeys field.
func (o *SearchRequestDto) SetVariantRollupKeys(v []string) {
	o.VariantRollupKeys = v
}

// GetPreFilter returns the PreFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetPreFilter() string {
	if o == nil || IsNil(o.PreFilter.Get()) {
		var ret string
		return ret
	}
	return *o.PreFilter.Get()
}

// GetPreFilterOk returns a tuple with the PreFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetPreFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreFilter.Get(), o.PreFilter.IsSet()
}

// HasPreFilter returns a boolean if a field has been set.
func (o *SearchRequestDto) HasPreFilter() bool {
	if o != nil && o.PreFilter.IsSet() {
		return true
	}

	return false
}

// SetPreFilter gets a reference to the given NullableString and assigns it to the PreFilter field.
func (o *SearchRequestDto) SetPreFilter(v string) {
	o.PreFilter.Set(&v)
}
// SetPreFilterNil sets the value for PreFilter to be an explicit nil
func (o *SearchRequestDto) SetPreFilterNil() {
	o.PreFilter.Set(nil)
}

// UnsetPreFilter ensures that no value is present for PreFilter, not even an explicit nil
func (o *SearchRequestDto) UnsetPreFilter() {
	o.PreFilter.Unset()
}

// GetSite returns the Site field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetSite() string {
	if o == nil || IsNil(o.Site.Get()) {
		var ret string
		return ret
	}
	return *o.Site.Get()
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetSiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Site.Get(), o.Site.IsSet()
}

// HasSite returns a boolean if a field has been set.
func (o *SearchRequestDto) HasSite() bool {
	if o != nil && o.Site.IsSet() {
		return true
	}

	return false
}

// SetSite gets a reference to the given NullableString and assigns it to the Site field.
func (o *SearchRequestDto) SetSite(v string) {
	o.Site.Set(&v)
}
// SetSiteNil sets the value for Site to be an explicit nil
func (o *SearchRequestDto) SetSiteNil() {
	o.Site.Set(nil)
}

// UnsetSite ensures that no value is present for Site, not even an explicit nil
func (o *SearchRequestDto) UnsetSite() {
	o.Site.Unset()
}

// GetResponseMask returns the ResponseMask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetResponseMask() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ResponseMask
}

// GetResponseMaskOk returns a tuple with the ResponseMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetResponseMaskOk() ([]string, bool) {
	if o == nil || IsNil(o.ResponseMask) {
		return nil, false
	}
	return o.ResponseMask, true
}

// HasResponseMask returns a boolean if a field has been set.
func (o *SearchRequestDto) HasResponseMask() bool {
	if o != nil && IsNil(o.ResponseMask) {
		return true
	}

	return false
}

// SetResponseMask gets a reference to the given []string and assigns it to the ResponseMask field.
func (o *SearchRequestDto) SetResponseMask(v []string) {
	o.ResponseMask = v
}

// GetPageCategories returns the PageCategories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetPageCategories() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.PageCategories
}

// GetPageCategoriesOk returns a tuple with the PageCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetPageCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.PageCategories) {
		return nil, false
	}
	return o.PageCategories, true
}

// HasPageCategories returns a boolean if a field has been set.
func (o *SearchRequestDto) HasPageCategories() bool {
	if o != nil && IsNil(o.PageCategories) {
		return true
	}

	return false
}

// SetPageCategories gets a reference to the given []string and assigns it to the PageCategories field.
func (o *SearchRequestDto) SetPageCategories(v []string) {
	o.PageCategories = v
}

// GetSpellCorrectionMode returns the SpellCorrectionMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetSpellCorrectionMode() SpellCorrectionMode {
	if o == nil || IsNil(o.SpellCorrectionMode.Get()) {
		var ret SpellCorrectionMode
		return ret
	}
	return *o.SpellCorrectionMode.Get()
}

// GetSpellCorrectionModeOk returns a tuple with the SpellCorrectionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetSpellCorrectionModeOk() (*SpellCorrectionMode, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpellCorrectionMode.Get(), o.SpellCorrectionMode.IsSet()
}

// HasSpellCorrectionMode returns a boolean if a field has been set.
func (o *SearchRequestDto) HasSpellCorrectionMode() bool {
	if o != nil && o.SpellCorrectionMode.IsSet() {
		return true
	}

	return false
}

// SetSpellCorrectionMode gets a reference to the given NullableSpellCorrectionMode and assigns it to the SpellCorrectionMode field.
func (o *SearchRequestDto) SetSpellCorrectionMode(v SpellCorrectionMode) {
	o.SpellCorrectionMode.Set(&v)
}
// SetSpellCorrectionModeNil sets the value for SpellCorrectionMode to be an explicit nil
func (o *SearchRequestDto) SetSpellCorrectionModeNil() {
	o.SpellCorrectionMode.Set(nil)
}

// UnsetSpellCorrectionMode ensures that no value is present for SpellCorrectionMode, not even an explicit nil
func (o *SearchRequestDto) UnsetSpellCorrectionMode() {
	o.SpellCorrectionMode.Unset()
}

// GetIncludeExpandedResults returns the IncludeExpandedResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetIncludeExpandedResults() bool {
	if o == nil || IsNil(o.IncludeExpandedResults.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeExpandedResults.Get()
}

// GetIncludeExpandedResultsOk returns a tuple with the IncludeExpandedResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetIncludeExpandedResultsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeExpandedResults.Get(), o.IncludeExpandedResults.IsSet()
}

// HasIncludeExpandedResults returns a boolean if a field has been set.
func (o *SearchRequestDto) HasIncludeExpandedResults() bool {
	if o != nil && o.IncludeExpandedResults.IsSet() {
		return true
	}

	return false
}

// SetIncludeExpandedResults gets a reference to the given NullableBool and assigns it to the IncludeExpandedResults field.
func (o *SearchRequestDto) SetIncludeExpandedResults(v bool) {
	o.IncludeExpandedResults.Set(&v)
}
// SetIncludeExpandedResultsNil sets the value for IncludeExpandedResults to be an explicit nil
func (o *SearchRequestDto) SetIncludeExpandedResultsNil() {
	o.IncludeExpandedResults.Set(nil)
}

// UnsetIncludeExpandedResults ensures that no value is present for IncludeExpandedResults, not even an explicit nil
func (o *SearchRequestDto) UnsetIncludeExpandedResults() {
	o.IncludeExpandedResults.Unset()
}

// GetPinUnexpandedResults returns the PinUnexpandedResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetPinUnexpandedResults() bool {
	if o == nil || IsNil(o.PinUnexpandedResults.Get()) {
		var ret bool
		return ret
	}
	return *o.PinUnexpandedResults.Get()
}

// GetPinUnexpandedResultsOk returns a tuple with the PinUnexpandedResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetPinUnexpandedResultsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PinUnexpandedResults.Get(), o.PinUnexpandedResults.IsSet()
}

// HasPinUnexpandedResults returns a boolean if a field has been set.
func (o *SearchRequestDto) HasPinUnexpandedResults() bool {
	if o != nil && o.PinUnexpandedResults.IsSet() {
		return true
	}

	return false
}

// SetPinUnexpandedResults gets a reference to the given NullableBool and assigns it to the PinUnexpandedResults field.
func (o *SearchRequestDto) SetPinUnexpandedResults(v bool) {
	o.PinUnexpandedResults.Set(&v)
}
// SetPinUnexpandedResultsNil sets the value for PinUnexpandedResults to be an explicit nil
func (o *SearchRequestDto) SetPinUnexpandedResultsNil() {
	o.PinUnexpandedResults.Set(nil)
}

// UnsetPinUnexpandedResults ensures that no value is present for PinUnexpandedResults, not even an explicit nil
func (o *SearchRequestDto) UnsetPinUnexpandedResults() {
	o.PinUnexpandedResults.Unset()
}

// GetDebug returns the Debug field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetDebug() bool {
	if o == nil || IsNil(o.Debug.Get()) {
		var ret bool
		return ret
	}
	return *o.Debug.Get()
}

// GetDebugOk returns a tuple with the Debug field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetDebugOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Debug.Get(), o.Debug.IsSet()
}

// HasDebug returns a boolean if a field has been set.
func (o *SearchRequestDto) HasDebug() bool {
	if o != nil && o.Debug.IsSet() {
		return true
	}

	return false
}

// SetDebug gets a reference to the given NullableBool and assigns it to the Debug field.
func (o *SearchRequestDto) SetDebug(v bool) {
	o.Debug.Set(&v)
}
// SetDebugNil sets the value for Debug to be an explicit nil
func (o *SearchRequestDto) SetDebugNil() {
	o.Debug.Set(nil)
}

// UnsetDebug ensures that no value is present for Debug, not even an explicit nil
func (o *SearchRequestDto) UnsetDebug() {
	o.Debug.Unset()
}

// GetFacetLimit returns the FacetLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetFacetLimit() int32 {
	if o == nil || IsNil(o.FacetLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.FacetLimit.Get()
}

// GetFacetLimitOk returns a tuple with the FacetLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetFacetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FacetLimit.Get(), o.FacetLimit.IsSet()
}

// HasFacetLimit returns a boolean if a field has been set.
func (o *SearchRequestDto) HasFacetLimit() bool {
	if o != nil && o.FacetLimit.IsSet() {
		return true
	}

	return false
}

// SetFacetLimit gets a reference to the given NullableInt32 and assigns it to the FacetLimit field.
func (o *SearchRequestDto) SetFacetLimit(v int32) {
	o.FacetLimit.Set(&v)
}
// SetFacetLimitNil sets the value for FacetLimit to be an explicit nil
func (o *SearchRequestDto) SetFacetLimitNil() {
	o.FacetLimit.Set(nil)
}

// UnsetFacetLimit ensures that no value is present for FacetLimit, not even an explicit nil
func (o *SearchRequestDto) UnsetFacetLimit() {
	o.FacetLimit.Unset()
}

// GetLoginId returns the LoginId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetLoginId() string {
	if o == nil || IsNil(o.LoginId.Get()) {
		var ret string
		return ret
	}
	return *o.LoginId.Get()
}

// GetLoginIdOk returns a tuple with the LoginId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetLoginIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LoginId.Get(), o.LoginId.IsSet()
}

// HasLoginId returns a boolean if a field has been set.
func (o *SearchRequestDto) HasLoginId() bool {
	if o != nil && o.LoginId.IsSet() {
		return true
	}

	return false
}

// SetLoginId gets a reference to the given NullableString and assigns it to the LoginId field.
func (o *SearchRequestDto) SetLoginId(v string) {
	o.LoginId.Set(&v)
}
// SetLoginIdNil sets the value for LoginId to be an explicit nil
func (o *SearchRequestDto) SetLoginIdNil() {
	o.LoginId.Set(nil)
}

// UnsetLoginId ensures that no value is present for LoginId, not even an explicit nil
func (o *SearchRequestDto) UnsetLoginId() {
	o.LoginId.Unset()
}

// GetOverwrites returns the Overwrites field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchRequestDto) GetOverwrites() SearchRequestDtoOverwrites {
	if o == nil || IsNil(o.Overwrites.Get()) {
		var ret SearchRequestDtoOverwrites
		return ret
	}
	return *o.Overwrites.Get()
}

// GetOverwritesOk returns a tuple with the Overwrites field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchRequestDto) GetOverwritesOk() (*SearchRequestDtoOverwrites, bool) {
	if o == nil {
		return nil, false
	}
	return o.Overwrites.Get(), o.Overwrites.IsSet()
}

// HasOverwrites returns a boolean if a field has been set.
func (o *SearchRequestDto) HasOverwrites() bool {
	if o != nil && o.Overwrites.IsSet() {
		return true
	}

	return false
}

// SetOverwrites gets a reference to the given NullableSearchRequestDtoOverwrites and assigns it to the Overwrites field.
func (o *SearchRequestDto) SetOverwrites(v SearchRequestDtoOverwrites) {
	o.Overwrites.Set(&v)
}
// SetOverwritesNil sets the value for Overwrites to be an explicit nil
func (o *SearchRequestDto) SetOverwritesNil() {
	o.Overwrites.Set(nil)
}

// UnsetOverwrites ensures that no value is present for Overwrites, not even an explicit nil
func (o *SearchRequestDto) UnsetOverwrites() {
	o.Overwrites.Unset()
}

func (o SearchRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Query.IsSet() {
		toSerialize["query"] = o.Query.Get()
	}
	if o.Area.IsSet() {
		toSerialize["area"] = o.Area.Get()
	}
	if o.Collection.IsSet() {
		toSerialize["collection"] = o.Collection.Get()
	}
	if o.VisitorId.IsSet() {
		toSerialize["visitorId"] = o.VisitorId.Get()
	}
	toSerialize["refinements"] = o.Refinements
	if o.PageSize.IsSet() {
		toSerialize["pageSize"] = o.PageSize.Get()
	}
	if o.Skip.IsSet() {
		toSerialize["skip"] = o.Skip.Get()
	}
	if o.BiasingProfile.IsSet() {
		toSerialize["biasingProfile"] = o.BiasingProfile.Get()
	}
	toSerialize["biasing"] = o.Biasing.Get()
	toSerialize["customUrlParams"] = o.CustomUrlParams
	toSerialize["sorts"] = o.Sorts
	if o.IncludedNavigations != nil {
		toSerialize["includedNavigations"] = o.IncludedNavigations
	}
	if o.ExcludedNavigations != nil {
		toSerialize["excludedNavigations"] = o.ExcludedNavigations
	}
	if o.DynamicFacet.IsSet() {
		toSerialize["dynamicFacet"] = o.DynamicFacet.Get()
	}
	if o.VariantRollupKeys != nil {
		toSerialize["variantRollupKeys"] = o.VariantRollupKeys
	}
	if o.PreFilter.IsSet() {
		toSerialize["preFilter"] = o.PreFilter.Get()
	}
	if o.Site.IsSet() {
		toSerialize["site"] = o.Site.Get()
	}
	if o.ResponseMask != nil {
		toSerialize["responseMask"] = o.ResponseMask
	}
	if o.PageCategories != nil {
		toSerialize["pageCategories"] = o.PageCategories
	}
	if o.SpellCorrectionMode.IsSet() {
		toSerialize["spellCorrectionMode"] = o.SpellCorrectionMode.Get()
	}
	if o.IncludeExpandedResults.IsSet() {
		toSerialize["includeExpandedResults"] = o.IncludeExpandedResults.Get()
	}
	if o.PinUnexpandedResults.IsSet() {
		toSerialize["pinUnexpandedResults"] = o.PinUnexpandedResults.Get()
	}
	if o.Debug.IsSet() {
		toSerialize["debug"] = o.Debug.Get()
	}
	if o.FacetLimit.IsSet() {
		toSerialize["facetLimit"] = o.FacetLimit.Get()
	}
	if o.LoginId.IsSet() {
		toSerialize["loginId"] = o.LoginId.Get()
	}
	if o.Overwrites.IsSet() {
		toSerialize["overwrites"] = o.Overwrites.Get()
	}
	return toSerialize, nil
}

type NullableSearchRequestDto struct {
	value *SearchRequestDto
	isSet bool
}

func (v NullableSearchRequestDto) Get() *SearchRequestDto {
	return v.value
}

func (v *NullableSearchRequestDto) Set(val *SearchRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRequestDto(val *SearchRequestDto) *NullableSearchRequestDto {
	return &NullableSearchRequestDto{value: val, isSet: true}
}

func (v NullableSearchRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


