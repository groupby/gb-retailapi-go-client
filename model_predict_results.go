/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the PredictResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PredictResults{}

// PredictResults Prediction result including list of recommendations based on provided inputs.
type PredictResults struct {
	// Warnings collected with validation and Recommendations AI API issues.
	Warnings []map[string]interface{} `json:"warnings,omitempty"`
	// Recommendations built by Recommendations AI model.
	Products []map[string]interface{} `json:"products,omitempty"`
	// Recommendations built by Recommendations AI model.
	Records []map[string]interface{} `json:"records,omitempty"`
	// Model Id used for predictions
	ModelId *string `json:"modelId,omitempty"`
	// Model Name used for predictions
	ModelName *string `json:"modelName,omitempty"`
	//   Currently supported values:   `recommended-for-you`   `others-you-may-like`,   `frequently-bought-together`   `page-optimization`   `similar-items`,   `buy-it-again`   `on-sale-items`   `recently-viewed`    This field together with optimization_objective describe model metadata to use to control model training and   serving. See https://cloud.google.com/retail/docs/models for more details. 
	ModelType *string `json:"modelType,omitempty"`
	//   Currently supported values: `ctr`, `cvr`, `revenue-per-order`.     If not specified, we choose default based on model type. Default depends on type of recommendation:   `recommended-for-you` => `ctr`   `others-you-may-like` => `ctr`   `frequently-bought-together` => `revenue_per_order`    This field together with modelType describe model metadata to use to control model training and serving.   See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which   combination of parameters are valid. 
	OptimizationObjective *string `json:"optimizationObjective,omitempty"`
	// Filter set applied to the recommendation
	FilterSet *string `json:"filterSet,omitempty"`
	// RawFilter applied to the recommendation
	RawFilter *string `json:"rawFilter,omitempty"`
	// Filters applied to the recommendation
	Filters []FilterParameter `json:"filters,omitempty"`
	Metadata *interface{} `json:"metadata,omitempty"`
}

// NewPredictResults instantiates a new PredictResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPredictResults() *PredictResults {
	this := PredictResults{}
	return &this
}

// NewPredictResultsWithDefaults instantiates a new PredictResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPredictResultsWithDefaults() *PredictResults {
	this := PredictResults{}
	return &this
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PredictResults) GetWarnings() []map[string]interface{} {
	if o == nil || IsNil(o.Warnings) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictResults) GetWarningsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PredictResults) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []map[string]interface{} and assigns it to the Warnings field.
func (o *PredictResults) SetWarnings(v []map[string]interface{}) {
	o.Warnings = v
}

// GetProducts returns the Products field value if set, zero value otherwise.
func (o *PredictResults) GetProducts() []map[string]interface{} {
	if o == nil || IsNil(o.Products) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Products
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictResults) GetProductsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Products) {
		return nil, false
	}
	return o.Products, true
}

// HasProducts returns a boolean if a field has been set.
func (o *PredictResults) HasProducts() bool {
	if o != nil && !IsNil(o.Products) {
		return true
	}

	return false
}

// SetProducts gets a reference to the given []map[string]interface{} and assigns it to the Products field.
func (o *PredictResults) SetProducts(v []map[string]interface{}) {
	o.Products = v
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *PredictResults) GetRecords() []map[string]interface{} {
	if o == nil || IsNil(o.Records) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictResults) GetRecordsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *PredictResults) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []map[string]interface{} and assigns it to the Records field.
func (o *PredictResults) SetRecords(v []map[string]interface{}) {
	o.Records = v
}

// GetModelId returns the ModelId field value if set, zero value otherwise.
func (o *PredictResults) GetModelId() string {
	if o == nil || IsNil(o.ModelId) {
		var ret string
		return ret
	}
	return *o.ModelId
}

// GetModelIdOk returns a tuple with the ModelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictResults) GetModelIdOk() (*string, bool) {
	if o == nil || IsNil(o.ModelId) {
		return nil, false
	}
	return o.ModelId, true
}

// HasModelId returns a boolean if a field has been set.
func (o *PredictResults) HasModelId() bool {
	if o != nil && !IsNil(o.ModelId) {
		return true
	}

	return false
}

// SetModelId gets a reference to the given string and assigns it to the ModelId field.
func (o *PredictResults) SetModelId(v string) {
	o.ModelId = &v
}

// GetModelName returns the ModelName field value if set, zero value otherwise.
func (o *PredictResults) GetModelName() string {
	if o == nil || IsNil(o.ModelName) {
		var ret string
		return ret
	}
	return *o.ModelName
}

// GetModelNameOk returns a tuple with the ModelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictResults) GetModelNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModelName) {
		return nil, false
	}
	return o.ModelName, true
}

// HasModelName returns a boolean if a field has been set.
func (o *PredictResults) HasModelName() bool {
	if o != nil && !IsNil(o.ModelName) {
		return true
	}

	return false
}

// SetModelName gets a reference to the given string and assigns it to the ModelName field.
func (o *PredictResults) SetModelName(v string) {
	o.ModelName = &v
}

// GetModelType returns the ModelType field value if set, zero value otherwise.
func (o *PredictResults) GetModelType() string {
	if o == nil || IsNil(o.ModelType) {
		var ret string
		return ret
	}
	return *o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictResults) GetModelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ModelType) {
		return nil, false
	}
	return o.ModelType, true
}

// HasModelType returns a boolean if a field has been set.
func (o *PredictResults) HasModelType() bool {
	if o != nil && !IsNil(o.ModelType) {
		return true
	}

	return false
}

// SetModelType gets a reference to the given string and assigns it to the ModelType field.
func (o *PredictResults) SetModelType(v string) {
	o.ModelType = &v
}

// GetOptimizationObjective returns the OptimizationObjective field value if set, zero value otherwise.
func (o *PredictResults) GetOptimizationObjective() string {
	if o == nil || IsNil(o.OptimizationObjective) {
		var ret string
		return ret
	}
	return *o.OptimizationObjective
}

// GetOptimizationObjectiveOk returns a tuple with the OptimizationObjective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictResults) GetOptimizationObjectiveOk() (*string, bool) {
	if o == nil || IsNil(o.OptimizationObjective) {
		return nil, false
	}
	return o.OptimizationObjective, true
}

// HasOptimizationObjective returns a boolean if a field has been set.
func (o *PredictResults) HasOptimizationObjective() bool {
	if o != nil && !IsNil(o.OptimizationObjective) {
		return true
	}

	return false
}

// SetOptimizationObjective gets a reference to the given string and assigns it to the OptimizationObjective field.
func (o *PredictResults) SetOptimizationObjective(v string) {
	o.OptimizationObjective = &v
}

// GetFilterSet returns the FilterSet field value if set, zero value otherwise.
func (o *PredictResults) GetFilterSet() string {
	if o == nil || IsNil(o.FilterSet) {
		var ret string
		return ret
	}
	return *o.FilterSet
}

// GetFilterSetOk returns a tuple with the FilterSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictResults) GetFilterSetOk() (*string, bool) {
	if o == nil || IsNil(o.FilterSet) {
		return nil, false
	}
	return o.FilterSet, true
}

// HasFilterSet returns a boolean if a field has been set.
func (o *PredictResults) HasFilterSet() bool {
	if o != nil && !IsNil(o.FilterSet) {
		return true
	}

	return false
}

// SetFilterSet gets a reference to the given string and assigns it to the FilterSet field.
func (o *PredictResults) SetFilterSet(v string) {
	o.FilterSet = &v
}

// GetRawFilter returns the RawFilter field value if set, zero value otherwise.
func (o *PredictResults) GetRawFilter() string {
	if o == nil || IsNil(o.RawFilter) {
		var ret string
		return ret
	}
	return *o.RawFilter
}

// GetRawFilterOk returns a tuple with the RawFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictResults) GetRawFilterOk() (*string, bool) {
	if o == nil || IsNil(o.RawFilter) {
		return nil, false
	}
	return o.RawFilter, true
}

// HasRawFilter returns a boolean if a field has been set.
func (o *PredictResults) HasRawFilter() bool {
	if o != nil && !IsNil(o.RawFilter) {
		return true
	}

	return false
}

// SetRawFilter gets a reference to the given string and assigns it to the RawFilter field.
func (o *PredictResults) SetRawFilter(v string) {
	o.RawFilter = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *PredictResults) GetFilters() []FilterParameter {
	if o == nil || IsNil(o.Filters) {
		var ret []FilterParameter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictResults) GetFiltersOk() ([]FilterParameter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *PredictResults) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []FilterParameter and assigns it to the Filters field.
func (o *PredictResults) SetFilters(v []FilterParameter) {
	o.Filters = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PredictResults) GetMetadata() interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PredictResults) GetMetadataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PredictResults) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given interface{} and assigns it to the Metadata field.
func (o *PredictResults) SetMetadata(v interface{}) {
	o.Metadata = &v
}

func (o PredictResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PredictResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	if !IsNil(o.Products) {
		toSerialize["products"] = o.Products
	}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	if !IsNil(o.ModelId) {
		toSerialize["modelId"] = o.ModelId
	}
	if !IsNil(o.ModelName) {
		toSerialize["modelName"] = o.ModelName
	}
	if !IsNil(o.ModelType) {
		toSerialize["modelType"] = o.ModelType
	}
	if !IsNil(o.OptimizationObjective) {
		toSerialize["optimizationObjective"] = o.OptimizationObjective
	}
	if !IsNil(o.FilterSet) {
		toSerialize["filterSet"] = o.FilterSet
	}
	if !IsNil(o.RawFilter) {
		toSerialize["rawFilter"] = o.RawFilter
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullablePredictResults struct {
	value *PredictResults
	isSet bool
}

func (v NullablePredictResults) Get() *PredictResults {
	return v.value
}

func (v *NullablePredictResults) Set(val *PredictResults) {
	v.value = val
	v.isSet = true
}

func (v NullablePredictResults) IsSet() bool {
	return v.isSet
}

func (v *NullablePredictResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePredictResults(val *PredictResults) *NullablePredictResults {
	return &NullablePredictResults{value: val, isSet: true}
}

func (v NullablePredictResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePredictResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


