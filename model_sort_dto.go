/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the SortDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SortDto{}

// SortDto Order the returned products should appear on the page.
type SortDto struct {
	// Field the order will be applied to.
	Field string `json:"field"`
	Order NullableSortDtoOrderDto `json:"order"`
}

// NewSortDto instantiates a new SortDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSortDto(field string, order NullableSortDtoOrderDto) *SortDto {
	this := SortDto{}
	this.Field = field
	this.Order = order
	return &this
}

// NewSortDtoWithDefaults instantiates a new SortDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSortDtoWithDefaults() *SortDto {
	this := SortDto{}
	return &this
}

// GetField returns the Field field value
func (o *SortDto) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *SortDto) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *SortDto) SetField(v string) {
	o.Field = v
}

// GetOrder returns the Order field value
// If the value is explicit nil, the zero value for SortDtoOrderDto will be returned
func (o *SortDto) GetOrder() SortDtoOrderDto {
	if o == nil || o.Order.Get() == nil {
		var ret SortDtoOrderDto
		return ret
	}

	return *o.Order.Get()
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SortDto) GetOrderOk() (*SortDtoOrderDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order.Get(), o.Order.IsSet()
}

// SetOrder sets field value
func (o *SortDto) SetOrder(v SortDtoOrderDto) {
	o.Order.Set(&v)
}

func (o SortDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SortDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["order"] = o.Order.Get()
	return toSerialize, nil
}

type NullableSortDto struct {
	value *SortDto
	isSet bool
}

func (v NullableSortDto) Get() *SortDto {
	return v.value
}

func (v *NullableSortDto) Set(val *SortDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSortDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSortDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortDto(val *SortDto) *NullableSortDto {
	return &NullableSortDto{value: val, isSet: true}
}

func (v NullableSortDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


