/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the SearchTerms type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchTerms{}

// SearchTerms Object with one single suggestion and associated info (brands and categories).
type SearchTerms struct {
	// Suggestion itself.
	Value *string `json:"value,omitempty"`
	AdditionalInfo AdditionalInfo `json:"additionalInfo"`
}

// NewSearchTerms instantiates a new SearchTerms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchTerms(additionalInfo AdditionalInfo) *SearchTerms {
	this := SearchTerms{}
	this.AdditionalInfo = additionalInfo
	return &this
}

// NewSearchTermsWithDefaults instantiates a new SearchTerms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchTermsWithDefaults() *SearchTerms {
	this := SearchTerms{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SearchTerms) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchTerms) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SearchTerms) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SearchTerms) SetValue(v string) {
	o.Value = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value
func (o *SearchTerms) GetAdditionalInfo() AdditionalInfo {
	if o == nil {
		var ret AdditionalInfo
		return ret
	}

	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value
// and a boolean to check if the value has been set.
func (o *SearchTerms) GetAdditionalInfoOk() (*AdditionalInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdditionalInfo, true
}

// SetAdditionalInfo sets field value
func (o *SearchTerms) SetAdditionalInfo(v AdditionalInfo) {
	o.AdditionalInfo = v
}

func (o SearchTerms) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchTerms) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	toSerialize["additionalInfo"] = o.AdditionalInfo
	return toSerialize, nil
}

type NullableSearchTerms struct {
	value *SearchTerms
	isSet bool
}

func (v NullableSearchTerms) Get() *SearchTerms {
	return v.value
}

func (v *NullableSearchTerms) Set(val *SearchTerms) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchTerms) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchTerms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchTerms(val *SearchTerms) *NullableSearchTerms {
	return &NullableSearchTerms{value: val, isSet: true}
}

func (v NullableSearchTerms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchTerms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


