/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the ProductDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductDto{}

// ProductDto Product representation.
type ProductDto struct {
	// Relative path to product in Google Retail system.
	Name *string `json:"name,omitempty"`
	// Product id in Google Retail system.
	Id *string `json:"id,omitempty"`
	// Product type. Possible values: PRIMARY, VARIANT. If the product has variant list and the request specifies the variantIds, requested variants will be the first in the response.
	Type *string `json:"type,omitempty"`
	// Product ID that is primary in relation to the current one
	PrimaryProductId *string `json:"primaryProductId,omitempty"`
	// The of the collection members when product type is COLLECTION
	CollectionMemberIds []string `json:"collectionMemberIds,omitempty"`
	// Global Trade Item Number can be used by a company to uniquely identify all of its trade items.GTIN defines trade items as products or services that are priced, ordered or invoiced at any point in the supply chain.
	Gtin *string `json:"gtin,omitempty"`
	// Product categories (array).
	Categories []string `json:"categories,omitempty"`
	// Product title.
	Title *string `json:"title,omitempty"`
	// Product brands.
	Brands []string `json:"brands,omitempty"`
	// Product description.
	Description *string `json:"description,omitempty"`
	// Language of the title/description and other string attributes. Use language tags defined by [BCP 47][https://www.rfc-editor.org/rfc/bcp/bcp47.txt]. For product search this field is in use. It defaults to 'en-US' if unset.
	LanguageCode *string `json:"languageCode,omitempty"`
	// Highly encouraged. Extra product attributes to be included. For example, for products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the attributes here. Features that can take on one of a limited number of possible values. Two types of features can be set are: Textual features. some examples would be the brand/maker of a product, or country of a customer. Numerical features. Some examples would be the height/weight of a product, or age of a customer.  Max entries count: 200. Length limit of 128 characters.
	Attributes *map[string]ProductCustomAttribute `json:"attributes,omitempty"`
	// Product tags (array).
	Tags []string `json:"tags,omitempty"`
	PriceInfo *ProductDtoPriceInfo `json:"priceInfo,omitempty"`
	Rating *ProductDtoRating `json:"rating,omitempty"`
	AvailableTime *ProductDtoAvailableTime `json:"availableTime,omitempty"`
	// The online availability of the product. Default to IN_STOCK
	Availability *string `json:"availability,omitempty"`
	// The available quantity of the item.
	AvailableQuantity *int32 `json:"availableQuantity,omitempty"`
	// Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods.
	FulfillmentInfos []FulfillmentInfo `json:"fulfillmentInfos,omitempty"`
	// Link to the appropriate product.
	Uri *string `json:"uri,omitempty"`
	// Product Image.
	Images []Image `json:"images,omitempty"`
	Audience *ProductDtoAudience `json:"audience,omitempty"`
	ColorInfo *ProductDtoColorInfo `json:"colorInfo,omitempty"`
	// Product sizes (array).
	Sizes []string `json:"sizes,omitempty"`
	// The material of the product. For example, 'leather', 'wooden'. A maximum of 20 values are allowed. Length limit of 128 characters
	Materials []string `json:"materials,omitempty"`
	// The pattern or graphic print of the product. For example, 'striped', 'polka dot', 'paisley'. A maximum of 20 values are allowed per product. Length limit of 128 characters.
	Patterns []string `json:"patterns,omitempty"`
	// The condition of the product. Strongly encouraged to use the standardvalues: 'new', 'refurbished', 'used'. A maximum of 5 values are allowed per product. Length limit of 128 characters.
	Conditions []string `json:"conditions,omitempty"`
	PublishTime *ProductDtoPublishTime `json:"publishTime,omitempty"`
	RetrievableFields *ProductDtoRetrievableFields `json:"retrievableFields,omitempty"`
	// The promotions applied to the product. A maximum of 10 values are allowed per product.
	Promotions []Promotion `json:"promotions,omitempty"`
	// If the product has variant list and the request specifies the variantIds, requested variants will be the first in the response.
	Variants []ProductDto `json:"variants,omitempty"`
}

// NewProductDto instantiates a new ProductDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductDto() *ProductDto {
	this := ProductDto{}
	return &this
}

// NewProductDtoWithDefaults instantiates a new ProductDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductDtoWithDefaults() *ProductDto {
	this := ProductDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProductDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProductDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProductDto) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProductDto) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProductDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProductDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProductDto) SetType(v string) {
	o.Type = &v
}

// GetPrimaryProductId returns the PrimaryProductId field value if set, zero value otherwise.
func (o *ProductDto) GetPrimaryProductId() string {
	if o == nil || IsNil(o.PrimaryProductId) {
		var ret string
		return ret
	}
	return *o.PrimaryProductId
}

// GetPrimaryProductIdOk returns a tuple with the PrimaryProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetPrimaryProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryProductId) {
		return nil, false
	}
	return o.PrimaryProductId, true
}

// HasPrimaryProductId returns a boolean if a field has been set.
func (o *ProductDto) HasPrimaryProductId() bool {
	if o != nil && !IsNil(o.PrimaryProductId) {
		return true
	}

	return false
}

// SetPrimaryProductId gets a reference to the given string and assigns it to the PrimaryProductId field.
func (o *ProductDto) SetPrimaryProductId(v string) {
	o.PrimaryProductId = &v
}

// GetCollectionMemberIds returns the CollectionMemberIds field value if set, zero value otherwise.
func (o *ProductDto) GetCollectionMemberIds() []string {
	if o == nil || IsNil(o.CollectionMemberIds) {
		var ret []string
		return ret
	}
	return o.CollectionMemberIds
}

// GetCollectionMemberIdsOk returns a tuple with the CollectionMemberIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetCollectionMemberIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CollectionMemberIds) {
		return nil, false
	}
	return o.CollectionMemberIds, true
}

// HasCollectionMemberIds returns a boolean if a field has been set.
func (o *ProductDto) HasCollectionMemberIds() bool {
	if o != nil && !IsNil(o.CollectionMemberIds) {
		return true
	}

	return false
}

// SetCollectionMemberIds gets a reference to the given []string and assigns it to the CollectionMemberIds field.
func (o *ProductDto) SetCollectionMemberIds(v []string) {
	o.CollectionMemberIds = v
}

// GetGtin returns the Gtin field value if set, zero value otherwise.
func (o *ProductDto) GetGtin() string {
	if o == nil || IsNil(o.Gtin) {
		var ret string
		return ret
	}
	return *o.Gtin
}

// GetGtinOk returns a tuple with the Gtin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetGtinOk() (*string, bool) {
	if o == nil || IsNil(o.Gtin) {
		return nil, false
	}
	return o.Gtin, true
}

// HasGtin returns a boolean if a field has been set.
func (o *ProductDto) HasGtin() bool {
	if o != nil && !IsNil(o.Gtin) {
		return true
	}

	return false
}

// SetGtin gets a reference to the given string and assigns it to the Gtin field.
func (o *ProductDto) SetGtin(v string) {
	o.Gtin = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *ProductDto) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *ProductDto) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *ProductDto) SetCategories(v []string) {
	o.Categories = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ProductDto) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ProductDto) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ProductDto) SetTitle(v string) {
	o.Title = &v
}

// GetBrands returns the Brands field value if set, zero value otherwise.
func (o *ProductDto) GetBrands() []string {
	if o == nil || IsNil(o.Brands) {
		var ret []string
		return ret
	}
	return o.Brands
}

// GetBrandsOk returns a tuple with the Brands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetBrandsOk() ([]string, bool) {
	if o == nil || IsNil(o.Brands) {
		return nil, false
	}
	return o.Brands, true
}

// HasBrands returns a boolean if a field has been set.
func (o *ProductDto) HasBrands() bool {
	if o != nil && !IsNil(o.Brands) {
		return true
	}

	return false
}

// SetBrands gets a reference to the given []string and assigns it to the Brands field.
func (o *ProductDto) SetBrands(v []string) {
	o.Brands = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProductDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProductDto) SetDescription(v string) {
	o.Description = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *ProductDto) GetLanguageCode() string {
	if o == nil || IsNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *ProductDto) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *ProductDto) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ProductDto) GetAttributes() map[string]ProductCustomAttribute {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]ProductCustomAttribute
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetAttributesOk() (*map[string]ProductCustomAttribute, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ProductDto) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]ProductCustomAttribute and assigns it to the Attributes field.
func (o *ProductDto) SetAttributes(v map[string]ProductCustomAttribute) {
	o.Attributes = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ProductDto) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ProductDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ProductDto) SetTags(v []string) {
	o.Tags = v
}

// GetPriceInfo returns the PriceInfo field value if set, zero value otherwise.
func (o *ProductDto) GetPriceInfo() ProductDtoPriceInfo {
	if o == nil || IsNil(o.PriceInfo) {
		var ret ProductDtoPriceInfo
		return ret
	}
	return *o.PriceInfo
}

// GetPriceInfoOk returns a tuple with the PriceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetPriceInfoOk() (*ProductDtoPriceInfo, bool) {
	if o == nil || IsNil(o.PriceInfo) {
		return nil, false
	}
	return o.PriceInfo, true
}

// HasPriceInfo returns a boolean if a field has been set.
func (o *ProductDto) HasPriceInfo() bool {
	if o != nil && !IsNil(o.PriceInfo) {
		return true
	}

	return false
}

// SetPriceInfo gets a reference to the given ProductDtoPriceInfo and assigns it to the PriceInfo field.
func (o *ProductDto) SetPriceInfo(v ProductDtoPriceInfo) {
	o.PriceInfo = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *ProductDto) GetRating() ProductDtoRating {
	if o == nil || IsNil(o.Rating) {
		var ret ProductDtoRating
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetRatingOk() (*ProductDtoRating, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *ProductDto) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given ProductDtoRating and assigns it to the Rating field.
func (o *ProductDto) SetRating(v ProductDtoRating) {
	o.Rating = &v
}

// GetAvailableTime returns the AvailableTime field value if set, zero value otherwise.
func (o *ProductDto) GetAvailableTime() ProductDtoAvailableTime {
	if o == nil || IsNil(o.AvailableTime) {
		var ret ProductDtoAvailableTime
		return ret
	}
	return *o.AvailableTime
}

// GetAvailableTimeOk returns a tuple with the AvailableTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetAvailableTimeOk() (*ProductDtoAvailableTime, bool) {
	if o == nil || IsNil(o.AvailableTime) {
		return nil, false
	}
	return o.AvailableTime, true
}

// HasAvailableTime returns a boolean if a field has been set.
func (o *ProductDto) HasAvailableTime() bool {
	if o != nil && !IsNil(o.AvailableTime) {
		return true
	}

	return false
}

// SetAvailableTime gets a reference to the given ProductDtoAvailableTime and assigns it to the AvailableTime field.
func (o *ProductDto) SetAvailableTime(v ProductDtoAvailableTime) {
	o.AvailableTime = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *ProductDto) GetAvailability() string {
	if o == nil || IsNil(o.Availability) {
		var ret string
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetAvailabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *ProductDto) HasAvailability() bool {
	if o != nil && !IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given string and assigns it to the Availability field.
func (o *ProductDto) SetAvailability(v string) {
	o.Availability = &v
}

// GetAvailableQuantity returns the AvailableQuantity field value if set, zero value otherwise.
func (o *ProductDto) GetAvailableQuantity() int32 {
	if o == nil || IsNil(o.AvailableQuantity) {
		var ret int32
		return ret
	}
	return *o.AvailableQuantity
}

// GetAvailableQuantityOk returns a tuple with the AvailableQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetAvailableQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.AvailableQuantity) {
		return nil, false
	}
	return o.AvailableQuantity, true
}

// HasAvailableQuantity returns a boolean if a field has been set.
func (o *ProductDto) HasAvailableQuantity() bool {
	if o != nil && !IsNil(o.AvailableQuantity) {
		return true
	}

	return false
}

// SetAvailableQuantity gets a reference to the given int32 and assigns it to the AvailableQuantity field.
func (o *ProductDto) SetAvailableQuantity(v int32) {
	o.AvailableQuantity = &v
}

// GetFulfillmentInfos returns the FulfillmentInfos field value if set, zero value otherwise.
func (o *ProductDto) GetFulfillmentInfos() []FulfillmentInfo {
	if o == nil || IsNil(o.FulfillmentInfos) {
		var ret []FulfillmentInfo
		return ret
	}
	return o.FulfillmentInfos
}

// GetFulfillmentInfosOk returns a tuple with the FulfillmentInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetFulfillmentInfosOk() ([]FulfillmentInfo, bool) {
	if o == nil || IsNil(o.FulfillmentInfos) {
		return nil, false
	}
	return o.FulfillmentInfos, true
}

// HasFulfillmentInfos returns a boolean if a field has been set.
func (o *ProductDto) HasFulfillmentInfos() bool {
	if o != nil && !IsNil(o.FulfillmentInfos) {
		return true
	}

	return false
}

// SetFulfillmentInfos gets a reference to the given []FulfillmentInfo and assigns it to the FulfillmentInfos field.
func (o *ProductDto) SetFulfillmentInfos(v []FulfillmentInfo) {
	o.FulfillmentInfos = v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ProductDto) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ProductDto) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ProductDto) SetUri(v string) {
	o.Uri = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *ProductDto) GetImages() []Image {
	if o == nil || IsNil(o.Images) {
		var ret []Image
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetImagesOk() ([]Image, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ProductDto) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []Image and assigns it to the Images field.
func (o *ProductDto) SetImages(v []Image) {
	o.Images = v
}

// GetAudience returns the Audience field value if set, zero value otherwise.
func (o *ProductDto) GetAudience() ProductDtoAudience {
	if o == nil || IsNil(o.Audience) {
		var ret ProductDtoAudience
		return ret
	}
	return *o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetAudienceOk() (*ProductDtoAudience, bool) {
	if o == nil || IsNil(o.Audience) {
		return nil, false
	}
	return o.Audience, true
}

// HasAudience returns a boolean if a field has been set.
func (o *ProductDto) HasAudience() bool {
	if o != nil && !IsNil(o.Audience) {
		return true
	}

	return false
}

// SetAudience gets a reference to the given ProductDtoAudience and assigns it to the Audience field.
func (o *ProductDto) SetAudience(v ProductDtoAudience) {
	o.Audience = &v
}

// GetColorInfo returns the ColorInfo field value if set, zero value otherwise.
func (o *ProductDto) GetColorInfo() ProductDtoColorInfo {
	if o == nil || IsNil(o.ColorInfo) {
		var ret ProductDtoColorInfo
		return ret
	}
	return *o.ColorInfo
}

// GetColorInfoOk returns a tuple with the ColorInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetColorInfoOk() (*ProductDtoColorInfo, bool) {
	if o == nil || IsNil(o.ColorInfo) {
		return nil, false
	}
	return o.ColorInfo, true
}

// HasColorInfo returns a boolean if a field has been set.
func (o *ProductDto) HasColorInfo() bool {
	if o != nil && !IsNil(o.ColorInfo) {
		return true
	}

	return false
}

// SetColorInfo gets a reference to the given ProductDtoColorInfo and assigns it to the ColorInfo field.
func (o *ProductDto) SetColorInfo(v ProductDtoColorInfo) {
	o.ColorInfo = &v
}

// GetSizes returns the Sizes field value if set, zero value otherwise.
func (o *ProductDto) GetSizes() []string {
	if o == nil || IsNil(o.Sizes) {
		var ret []string
		return ret
	}
	return o.Sizes
}

// GetSizesOk returns a tuple with the Sizes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetSizesOk() ([]string, bool) {
	if o == nil || IsNil(o.Sizes) {
		return nil, false
	}
	return o.Sizes, true
}

// HasSizes returns a boolean if a field has been set.
func (o *ProductDto) HasSizes() bool {
	if o != nil && !IsNil(o.Sizes) {
		return true
	}

	return false
}

// SetSizes gets a reference to the given []string and assigns it to the Sizes field.
func (o *ProductDto) SetSizes(v []string) {
	o.Sizes = v
}

// GetMaterials returns the Materials field value if set, zero value otherwise.
func (o *ProductDto) GetMaterials() []string {
	if o == nil || IsNil(o.Materials) {
		var ret []string
		return ret
	}
	return o.Materials
}

// GetMaterialsOk returns a tuple with the Materials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetMaterialsOk() ([]string, bool) {
	if o == nil || IsNil(o.Materials) {
		return nil, false
	}
	return o.Materials, true
}

// HasMaterials returns a boolean if a field has been set.
func (o *ProductDto) HasMaterials() bool {
	if o != nil && !IsNil(o.Materials) {
		return true
	}

	return false
}

// SetMaterials gets a reference to the given []string and assigns it to the Materials field.
func (o *ProductDto) SetMaterials(v []string) {
	o.Materials = v
}

// GetPatterns returns the Patterns field value if set, zero value otherwise.
func (o *ProductDto) GetPatterns() []string {
	if o == nil || IsNil(o.Patterns) {
		var ret []string
		return ret
	}
	return o.Patterns
}

// GetPatternsOk returns a tuple with the Patterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.Patterns) {
		return nil, false
	}
	return o.Patterns, true
}

// HasPatterns returns a boolean if a field has been set.
func (o *ProductDto) HasPatterns() bool {
	if o != nil && !IsNil(o.Patterns) {
		return true
	}

	return false
}

// SetPatterns gets a reference to the given []string and assigns it to the Patterns field.
func (o *ProductDto) SetPatterns(v []string) {
	o.Patterns = v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *ProductDto) GetConditions() []string {
	if o == nil || IsNil(o.Conditions) {
		var ret []string
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetConditionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *ProductDto) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []string and assigns it to the Conditions field.
func (o *ProductDto) SetConditions(v []string) {
	o.Conditions = v
}

// GetPublishTime returns the PublishTime field value if set, zero value otherwise.
func (o *ProductDto) GetPublishTime() ProductDtoPublishTime {
	if o == nil || IsNil(o.PublishTime) {
		var ret ProductDtoPublishTime
		return ret
	}
	return *o.PublishTime
}

// GetPublishTimeOk returns a tuple with the PublishTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetPublishTimeOk() (*ProductDtoPublishTime, bool) {
	if o == nil || IsNil(o.PublishTime) {
		return nil, false
	}
	return o.PublishTime, true
}

// HasPublishTime returns a boolean if a field has been set.
func (o *ProductDto) HasPublishTime() bool {
	if o != nil && !IsNil(o.PublishTime) {
		return true
	}

	return false
}

// SetPublishTime gets a reference to the given ProductDtoPublishTime and assigns it to the PublishTime field.
func (o *ProductDto) SetPublishTime(v ProductDtoPublishTime) {
	o.PublishTime = &v
}

// GetRetrievableFields returns the RetrievableFields field value if set, zero value otherwise.
func (o *ProductDto) GetRetrievableFields() ProductDtoRetrievableFields {
	if o == nil || IsNil(o.RetrievableFields) {
		var ret ProductDtoRetrievableFields
		return ret
	}
	return *o.RetrievableFields
}

// GetRetrievableFieldsOk returns a tuple with the RetrievableFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetRetrievableFieldsOk() (*ProductDtoRetrievableFields, bool) {
	if o == nil || IsNil(o.RetrievableFields) {
		return nil, false
	}
	return o.RetrievableFields, true
}

// HasRetrievableFields returns a boolean if a field has been set.
func (o *ProductDto) HasRetrievableFields() bool {
	if o != nil && !IsNil(o.RetrievableFields) {
		return true
	}

	return false
}

// SetRetrievableFields gets a reference to the given ProductDtoRetrievableFields and assigns it to the RetrievableFields field.
func (o *ProductDto) SetRetrievableFields(v ProductDtoRetrievableFields) {
	o.RetrievableFields = &v
}

// GetPromotions returns the Promotions field value if set, zero value otherwise.
func (o *ProductDto) GetPromotions() []Promotion {
	if o == nil || IsNil(o.Promotions) {
		var ret []Promotion
		return ret
	}
	return o.Promotions
}

// GetPromotionsOk returns a tuple with the Promotions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetPromotionsOk() ([]Promotion, bool) {
	if o == nil || IsNil(o.Promotions) {
		return nil, false
	}
	return o.Promotions, true
}

// HasPromotions returns a boolean if a field has been set.
func (o *ProductDto) HasPromotions() bool {
	if o != nil && !IsNil(o.Promotions) {
		return true
	}

	return false
}

// SetPromotions gets a reference to the given []Promotion and assigns it to the Promotions field.
func (o *ProductDto) SetPromotions(v []Promotion) {
	o.Promotions = v
}

// GetVariants returns the Variants field value if set, zero value otherwise.
func (o *ProductDto) GetVariants() []ProductDto {
	if o == nil || IsNil(o.Variants) {
		var ret []ProductDto
		return ret
	}
	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDto) GetVariantsOk() ([]ProductDto, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *ProductDto) HasVariants() bool {
	if o != nil && !IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given []ProductDto and assigns it to the Variants field.
func (o *ProductDto) SetVariants(v []ProductDto) {
	o.Variants = v
}

func (o ProductDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.PrimaryProductId) {
		toSerialize["primaryProductId"] = o.PrimaryProductId
	}
	if !IsNil(o.CollectionMemberIds) {
		toSerialize["collectionMemberIds"] = o.CollectionMemberIds
	}
	if !IsNil(o.Gtin) {
		toSerialize["gtin"] = o.Gtin
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Brands) {
		toSerialize["brands"] = o.Brands
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.PriceInfo) {
		toSerialize["priceInfo"] = o.PriceInfo
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.AvailableTime) {
		toSerialize["availableTime"] = o.AvailableTime
	}
	if !IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	if !IsNil(o.AvailableQuantity) {
		toSerialize["availableQuantity"] = o.AvailableQuantity
	}
	if !IsNil(o.FulfillmentInfos) {
		toSerialize["fulfillmentInfos"] = o.FulfillmentInfos
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.Audience) {
		toSerialize["audience"] = o.Audience
	}
	if !IsNil(o.ColorInfo) {
		toSerialize["colorInfo"] = o.ColorInfo
	}
	if !IsNil(o.Sizes) {
		toSerialize["sizes"] = o.Sizes
	}
	if !IsNil(o.Materials) {
		toSerialize["materials"] = o.Materials
	}
	if !IsNil(o.Patterns) {
		toSerialize["patterns"] = o.Patterns
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.PublishTime) {
		toSerialize["publishTime"] = o.PublishTime
	}
	if !IsNil(o.RetrievableFields) {
		toSerialize["retrievableFields"] = o.RetrievableFields
	}
	if !IsNil(o.Promotions) {
		toSerialize["promotions"] = o.Promotions
	}
	if !IsNil(o.Variants) {
		toSerialize["variants"] = o.Variants
	}
	return toSerialize, nil
}

type NullableProductDto struct {
	value *ProductDto
	isSet bool
}

func (v NullableProductDto) Get() *ProductDto {
	return v.value
}

func (v *NullableProductDto) Set(val *ProductDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProductDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProductDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductDto(val *ProductDto) *NullableProductDto {
	return &NullableProductDto{value: val, isSet: true}
}

func (v NullableProductDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


