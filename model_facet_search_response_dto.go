/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the FacetSearchResponseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FacetSearchResponseDto{}

// FacetSearchResponseDto Facet search response representation.
type FacetSearchResponseDto struct {
	OriginalRequest SearchRequestDto `json:"originalRequest"`
	AvailableNavigation NavigationDto `json:"availableNavigation"`
}

// NewFacetSearchResponseDto instantiates a new FacetSearchResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFacetSearchResponseDto(originalRequest SearchRequestDto, availableNavigation NavigationDto) *FacetSearchResponseDto {
	this := FacetSearchResponseDto{}
	this.OriginalRequest = originalRequest
	this.AvailableNavigation = availableNavigation
	return &this
}

// NewFacetSearchResponseDtoWithDefaults instantiates a new FacetSearchResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFacetSearchResponseDtoWithDefaults() *FacetSearchResponseDto {
	this := FacetSearchResponseDto{}
	return &this
}

// GetOriginalRequest returns the OriginalRequest field value
func (o *FacetSearchResponseDto) GetOriginalRequest() SearchRequestDto {
	if o == nil {
		var ret SearchRequestDto
		return ret
	}

	return o.OriginalRequest
}

// GetOriginalRequestOk returns a tuple with the OriginalRequest field value
// and a boolean to check if the value has been set.
func (o *FacetSearchResponseDto) GetOriginalRequestOk() (*SearchRequestDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalRequest, true
}

// SetOriginalRequest sets field value
func (o *FacetSearchResponseDto) SetOriginalRequest(v SearchRequestDto) {
	o.OriginalRequest = v
}

// GetAvailableNavigation returns the AvailableNavigation field value
func (o *FacetSearchResponseDto) GetAvailableNavigation() NavigationDto {
	if o == nil {
		var ret NavigationDto
		return ret
	}

	return o.AvailableNavigation
}

// GetAvailableNavigationOk returns a tuple with the AvailableNavigation field value
// and a boolean to check if the value has been set.
func (o *FacetSearchResponseDto) GetAvailableNavigationOk() (*NavigationDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableNavigation, true
}

// SetAvailableNavigation sets field value
func (o *FacetSearchResponseDto) SetAvailableNavigation(v NavigationDto) {
	o.AvailableNavigation = v
}

func (o FacetSearchResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FacetSearchResponseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["originalRequest"] = o.OriginalRequest
	toSerialize["availableNavigation"] = o.AvailableNavigation
	return toSerialize, nil
}

type NullableFacetSearchResponseDto struct {
	value *FacetSearchResponseDto
	isSet bool
}

func (v NullableFacetSearchResponseDto) Get() *FacetSearchResponseDto {
	return v.value
}

func (v *NullableFacetSearchResponseDto) Set(val *FacetSearchResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFacetSearchResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFacetSearchResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacetSearchResponseDto(val *FacetSearchResponseDto) *NullableFacetSearchResponseDto {
	return &NullableFacetSearchResponseDto{value: val, isSet: true}
}

func (v NullableFacetSearchResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacetSearchResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


