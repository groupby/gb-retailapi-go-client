/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the ProductDtoRating type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductDtoRating{}

// ProductDtoRating struct for ProductDtoRating
type ProductDtoRating struct {
	// The total number of ratings. This value is independent of the value of histogram.This value must be nonnegative.
	RatingCount *int32 `json:"ratingCount,omitempty"`
	// The average rating of the product. The rating is scaled at 1-5.
	AverageRating *float32 `json:"averageRating,omitempty"`
	// List of rating counts per rating value (index = rating - 1). The list is empty if there is no rating. If the list is non-empty, its size is always 5. For example, [41, 14, 13, 47, 303]. It means that the product got 41 ratings with 1 star, 14 ratings with 2 star, and so on.
	RatingHistogram []int32 `json:"ratingHistogram,omitempty"`
}

// NewProductDtoRating instantiates a new ProductDtoRating object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductDtoRating() *ProductDtoRating {
	this := ProductDtoRating{}
	return &this
}

// NewProductDtoRatingWithDefaults instantiates a new ProductDtoRating object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductDtoRatingWithDefaults() *ProductDtoRating {
	this := ProductDtoRating{}
	return &this
}

// GetRatingCount returns the RatingCount field value if set, zero value otherwise.
func (o *ProductDtoRating) GetRatingCount() int32 {
	if o == nil || IsNil(o.RatingCount) {
		var ret int32
		return ret
	}
	return *o.RatingCount
}

// GetRatingCountOk returns a tuple with the RatingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDtoRating) GetRatingCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RatingCount) {
		return nil, false
	}
	return o.RatingCount, true
}

// HasRatingCount returns a boolean if a field has been set.
func (o *ProductDtoRating) HasRatingCount() bool {
	if o != nil && !IsNil(o.RatingCount) {
		return true
	}

	return false
}

// SetRatingCount gets a reference to the given int32 and assigns it to the RatingCount field.
func (o *ProductDtoRating) SetRatingCount(v int32) {
	o.RatingCount = &v
}

// GetAverageRating returns the AverageRating field value if set, zero value otherwise.
func (o *ProductDtoRating) GetAverageRating() float32 {
	if o == nil || IsNil(o.AverageRating) {
		var ret float32
		return ret
	}
	return *o.AverageRating
}

// GetAverageRatingOk returns a tuple with the AverageRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDtoRating) GetAverageRatingOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageRating) {
		return nil, false
	}
	return o.AverageRating, true
}

// HasAverageRating returns a boolean if a field has been set.
func (o *ProductDtoRating) HasAverageRating() bool {
	if o != nil && !IsNil(o.AverageRating) {
		return true
	}

	return false
}

// SetAverageRating gets a reference to the given float32 and assigns it to the AverageRating field.
func (o *ProductDtoRating) SetAverageRating(v float32) {
	o.AverageRating = &v
}

// GetRatingHistogram returns the RatingHistogram field value if set, zero value otherwise.
func (o *ProductDtoRating) GetRatingHistogram() []int32 {
	if o == nil || IsNil(o.RatingHistogram) {
		var ret []int32
		return ret
	}
	return o.RatingHistogram
}

// GetRatingHistogramOk returns a tuple with the RatingHistogram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDtoRating) GetRatingHistogramOk() ([]int32, bool) {
	if o == nil || IsNil(o.RatingHistogram) {
		return nil, false
	}
	return o.RatingHistogram, true
}

// HasRatingHistogram returns a boolean if a field has been set.
func (o *ProductDtoRating) HasRatingHistogram() bool {
	if o != nil && !IsNil(o.RatingHistogram) {
		return true
	}

	return false
}

// SetRatingHistogram gets a reference to the given []int32 and assigns it to the RatingHistogram field.
func (o *ProductDtoRating) SetRatingHistogram(v []int32) {
	o.RatingHistogram = v
}

func (o ProductDtoRating) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductDtoRating) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RatingCount) {
		toSerialize["ratingCount"] = o.RatingCount
	}
	if !IsNil(o.AverageRating) {
		toSerialize["averageRating"] = o.AverageRating
	}
	if !IsNil(o.RatingHistogram) {
		toSerialize["ratingHistogram"] = o.RatingHistogram
	}
	return toSerialize, nil
}

type NullableProductDtoRating struct {
	value *ProductDtoRating
	isSet bool
}

func (v NullableProductDtoRating) Get() *ProductDtoRating {
	return v.value
}

func (v *NullableProductDtoRating) Set(val *ProductDtoRating) {
	v.value = val
	v.isSet = true
}

func (v NullableProductDtoRating) IsSet() bool {
	return v.isSet
}

func (v *NullableProductDtoRating) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductDtoRating(val *ProductDtoRating) *NullableProductDtoRating {
	return &NullableProductDtoRating{value: val, isSet: true}
}

func (v NullableProductDtoRating) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductDtoRating) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


