/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the Timestamp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Timestamp{}

// Timestamp Timestamp info with seconds and nanos.
type Timestamp struct {
	// Timestamp seconds.
	Seconds *int64 `json:"seconds,omitempty"`
	// Timestamp nanos.
	Nanos *int32 `json:"nanos,omitempty"`
}

// NewTimestamp instantiates a new Timestamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimestamp() *Timestamp {
	this := Timestamp{}
	return &this
}

// NewTimestampWithDefaults instantiates a new Timestamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimestampWithDefaults() *Timestamp {
	this := Timestamp{}
	return &this
}

// GetSeconds returns the Seconds field value if set, zero value otherwise.
func (o *Timestamp) GetSeconds() int64 {
	if o == nil || IsNil(o.Seconds) {
		var ret int64
		return ret
	}
	return *o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Timestamp) GetSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.Seconds) {
		return nil, false
	}
	return o.Seconds, true
}

// HasSeconds returns a boolean if a field has been set.
func (o *Timestamp) HasSeconds() bool {
	if o != nil && !IsNil(o.Seconds) {
		return true
	}

	return false
}

// SetSeconds gets a reference to the given int64 and assigns it to the Seconds field.
func (o *Timestamp) SetSeconds(v int64) {
	o.Seconds = &v
}

// GetNanos returns the Nanos field value if set, zero value otherwise.
func (o *Timestamp) GetNanos() int32 {
	if o == nil || IsNil(o.Nanos) {
		var ret int32
		return ret
	}
	return *o.Nanos
}

// GetNanosOk returns a tuple with the Nanos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Timestamp) GetNanosOk() (*int32, bool) {
	if o == nil || IsNil(o.Nanos) {
		return nil, false
	}
	return o.Nanos, true
}

// HasNanos returns a boolean if a field has been set.
func (o *Timestamp) HasNanos() bool {
	if o != nil && !IsNil(o.Nanos) {
		return true
	}

	return false
}

// SetNanos gets a reference to the given int32 and assigns it to the Nanos field.
func (o *Timestamp) SetNanos(v int32) {
	o.Nanos = &v
}

func (o Timestamp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Timestamp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Seconds) {
		toSerialize["seconds"] = o.Seconds
	}
	if !IsNil(o.Nanos) {
		toSerialize["nanos"] = o.Nanos
	}
	return toSerialize, nil
}

type NullableTimestamp struct {
	value *Timestamp
	isSet bool
}

func (v NullableTimestamp) Get() *Timestamp {
	return v.value
}

func (v *NullableTimestamp) Set(val *Timestamp) {
	v.value = val
	v.isSet = true
}

func (v NullableTimestamp) IsSet() bool {
	return v.isSet
}

func (v *NullableTimestamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimestamp(val *Timestamp) *NullableTimestamp {
	return &NullableTimestamp{value: val, isSet: true}
}

func (v NullableTimestamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimestamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


