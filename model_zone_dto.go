/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the ZoneDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneDto{}

// ZoneDto UI zones, that may contain code snippets, sub-searches and etc.
type ZoneDto struct {
	// A name for the zone, ideally human-readable.
	Name *string `json:"name,omitempty"`
	Type *ZoneDtoType `json:"type,omitempty"`
	// Zone content - it is can be any data, HTML - code, usual text or etc
	Content *string `json:"content,omitempty"`
	// Zone content - it is can be any data, HTML - code, usual text or etc
	RichContent *string `json:"richContent,omitempty"`
}

// NewZoneDto instantiates a new ZoneDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneDto() *ZoneDto {
	this := ZoneDto{}
	return &this
}

// NewZoneDtoWithDefaults instantiates a new ZoneDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneDtoWithDefaults() *ZoneDto {
	this := ZoneDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ZoneDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ZoneDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ZoneDto) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ZoneDto) GetType() ZoneDtoType {
	if o == nil || IsNil(o.Type) {
		var ret ZoneDtoType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDto) GetTypeOk() (*ZoneDtoType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ZoneDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ZoneDtoType and assigns it to the Type field.
func (o *ZoneDto) SetType(v ZoneDtoType) {
	o.Type = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ZoneDto) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDto) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ZoneDto) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ZoneDto) SetContent(v string) {
	o.Content = &v
}

// GetRichContent returns the RichContent field value if set, zero value otherwise.
func (o *ZoneDto) GetRichContent() string {
	if o == nil || IsNil(o.RichContent) {
		var ret string
		return ret
	}
	return *o.RichContent
}

// GetRichContentOk returns a tuple with the RichContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneDto) GetRichContentOk() (*string, bool) {
	if o == nil || IsNil(o.RichContent) {
		return nil, false
	}
	return o.RichContent, true
}

// HasRichContent returns a boolean if a field has been set.
func (o *ZoneDto) HasRichContent() bool {
	if o != nil && !IsNil(o.RichContent) {
		return true
	}

	return false
}

// SetRichContent gets a reference to the given string and assigns it to the RichContent field.
func (o *ZoneDto) SetRichContent(v string) {
	o.RichContent = &v
}

func (o ZoneDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.RichContent) {
		toSerialize["richContent"] = o.RichContent
	}
	return toSerialize, nil
}

type NullableZoneDto struct {
	value *ZoneDto
	isSet bool
}

func (v NullableZoneDto) Get() *ZoneDto {
	return v.value
}

func (v *NullableZoneDto) Set(val *ZoneDto) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneDto) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneDto(val *ZoneDto) *NullableZoneDto {
	return &NullableZoneDto{value: val, isSet: true}
}

func (v NullableZoneDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


