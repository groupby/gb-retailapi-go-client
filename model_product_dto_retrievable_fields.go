/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the ProductDtoRetrievableFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductDtoRetrievableFields{}

// ProductDtoRetrievableFields struct for ProductDtoRetrievableFields
type ProductDtoRetrievableFields struct {
	// Paths for retrievable fields (array).
	Paths []string `json:"paths,omitempty"`
}

// NewProductDtoRetrievableFields instantiates a new ProductDtoRetrievableFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductDtoRetrievableFields() *ProductDtoRetrievableFields {
	this := ProductDtoRetrievableFields{}
	return &this
}

// NewProductDtoRetrievableFieldsWithDefaults instantiates a new ProductDtoRetrievableFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductDtoRetrievableFieldsWithDefaults() *ProductDtoRetrievableFields {
	this := ProductDtoRetrievableFields{}
	return &this
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *ProductDtoRetrievableFields) GetPaths() []string {
	if o == nil || IsNil(o.Paths) {
		var ret []string
		return ret
	}
	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductDtoRetrievableFields) GetPathsOk() ([]string, bool) {
	if o == nil || IsNil(o.Paths) {
		return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *ProductDtoRetrievableFields) HasPaths() bool {
	if o != nil && !IsNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given []string and assigns it to the Paths field.
func (o *ProductDtoRetrievableFields) SetPaths(v []string) {
	o.Paths = v
}

func (o ProductDtoRetrievableFields) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductDtoRetrievableFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Paths) {
		toSerialize["paths"] = o.Paths
	}
	return toSerialize, nil
}

type NullableProductDtoRetrievableFields struct {
	value *ProductDtoRetrievableFields
	isSet bool
}

func (v NullableProductDtoRetrievableFields) Get() *ProductDtoRetrievableFields {
	return v.value
}

func (v *NullableProductDtoRetrievableFields) Set(val *ProductDtoRetrievableFields) {
	v.value = val
	v.isSet = true
}

func (v NullableProductDtoRetrievableFields) IsSet() bool {
	return v.isSet
}

func (v *NullableProductDtoRetrievableFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductDtoRetrievableFields(val *ProductDtoRetrievableFields) *NullableProductDtoRetrievableFields {
	return &NullableProductDtoRetrievableFields{value: val, isSet: true}
}

func (v NullableProductDtoRetrievableFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductDtoRetrievableFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


