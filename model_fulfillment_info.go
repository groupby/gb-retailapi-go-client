/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the FulfillmentInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FulfillmentInfo{}

// FulfillmentInfo Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods.
type FulfillmentInfo struct {
	// Fulfillment type. Place where product fulfilled.
	Type *string `json:"type,omitempty"`
	// Place ids where product fulfilled (array).
	PlaceIds []string `json:"placeIds,omitempty"`
}

// NewFulfillmentInfo instantiates a new FulfillmentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFulfillmentInfo() *FulfillmentInfo {
	this := FulfillmentInfo{}
	return &this
}

// NewFulfillmentInfoWithDefaults instantiates a new FulfillmentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFulfillmentInfoWithDefaults() *FulfillmentInfo {
	this := FulfillmentInfo{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FulfillmentInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FulfillmentInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FulfillmentInfo) SetType(v string) {
	o.Type = &v
}

// GetPlaceIds returns the PlaceIds field value if set, zero value otherwise.
func (o *FulfillmentInfo) GetPlaceIds() []string {
	if o == nil || IsNil(o.PlaceIds) {
		var ret []string
		return ret
	}
	return o.PlaceIds
}

// GetPlaceIdsOk returns a tuple with the PlaceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentInfo) GetPlaceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.PlaceIds) {
		return nil, false
	}
	return o.PlaceIds, true
}

// HasPlaceIds returns a boolean if a field has been set.
func (o *FulfillmentInfo) HasPlaceIds() bool {
	if o != nil && !IsNil(o.PlaceIds) {
		return true
	}

	return false
}

// SetPlaceIds gets a reference to the given []string and assigns it to the PlaceIds field.
func (o *FulfillmentInfo) SetPlaceIds(v []string) {
	o.PlaceIds = v
}

func (o FulfillmentInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FulfillmentInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.PlaceIds) {
		toSerialize["placeIds"] = o.PlaceIds
	}
	return toSerialize, nil
}

type NullableFulfillmentInfo struct {
	value *FulfillmentInfo
	isSet bool
}

func (v NullableFulfillmentInfo) Get() *FulfillmentInfo {
	return v.value
}

func (v *NullableFulfillmentInfo) Set(val *FulfillmentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFulfillmentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFulfillmentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFulfillmentInfo(val *FulfillmentInfo) *NullableFulfillmentInfo {
	return &NullableFulfillmentInfo{value: val, isSet: true}
}

func (v NullableFulfillmentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFulfillmentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


