/*
GroupBy Retail

GroupBy Retail API

API version: 0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the QueryPatternTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryPatternTrigger{}

// QueryPatternTrigger struct for QueryPatternTrigger
type QueryPatternTrigger struct {
	Type QueryPatternTriggerType `json:"type"`
	Values []string `json:"values,omitempty"`
	Patterns []map[string]interface{} `json:"patterns,omitempty"`
}

// NewQueryPatternTrigger instantiates a new QueryPatternTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryPatternTrigger(type_ QueryPatternTriggerType) *QueryPatternTrigger {
	this := QueryPatternTrigger{}
	this.Type = type_
	return &this
}

// NewQueryPatternTriggerWithDefaults instantiates a new QueryPatternTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryPatternTriggerWithDefaults() *QueryPatternTrigger {
	this := QueryPatternTrigger{}
	return &this
}

// GetType returns the Type field value
func (o *QueryPatternTrigger) GetType() QueryPatternTriggerType {
	if o == nil {
		var ret QueryPatternTriggerType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *QueryPatternTrigger) GetTypeOk() (*QueryPatternTriggerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *QueryPatternTrigger) SetType(v QueryPatternTriggerType) {
	o.Type = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *QueryPatternTrigger) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPatternTrigger) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *QueryPatternTrigger) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *QueryPatternTrigger) SetValues(v []string) {
	o.Values = v
}

// GetPatterns returns the Patterns field value if set, zero value otherwise.
func (o *QueryPatternTrigger) GetPatterns() []map[string]interface{} {
	if o == nil || IsNil(o.Patterns) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Patterns
}

// GetPatternsOk returns a tuple with the Patterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryPatternTrigger) GetPatternsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Patterns) {
		return nil, false
	}
	return o.Patterns, true
}

// HasPatterns returns a boolean if a field has been set.
func (o *QueryPatternTrigger) HasPatterns() bool {
	if o != nil && !IsNil(o.Patterns) {
		return true
	}

	return false
}

// SetPatterns gets a reference to the given []map[string]interface{} and assigns it to the Patterns field.
func (o *QueryPatternTrigger) SetPatterns(v []map[string]interface{}) {
	o.Patterns = v
}

func (o QueryPatternTrigger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryPatternTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.Patterns) {
		toSerialize["patterns"] = o.Patterns
	}
	return toSerialize, nil
}

type NullableQueryPatternTrigger struct {
	value *QueryPatternTrigger
	isSet bool
}

func (v NullableQueryPatternTrigger) Get() *QueryPatternTrigger {
	return v.value
}

func (v *NullableQueryPatternTrigger) Set(val *QueryPatternTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryPatternTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryPatternTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryPatternTrigger(val *QueryPatternTrigger) *NullableQueryPatternTrigger {
	return &NullableQueryPatternTrigger{value: val, isSet: true}
}

func (v NullableQueryPatternTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryPatternTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


