/*
GroupBy Retail

GroupBy Retail API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gbretailapi

import (
	"encoding/json"
)

// checks if the SearchResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResults{}

// SearchResults SAYT response. Contains list of suggestions ad base response information.
type SearchResults struct {
	Stats *SearchResultsStats `json:"stats,omitempty"`
	SearchTerms []SearchTerms `json:"searchTerms"`
	// Map with extended attributes which are returned in autocomplete response. 
	ExtendedAttributes *map[string][]string `json:"extendedAttributes,omitempty"`
	// SAYT response attributes. Contains list of direct matching attributes.
	AttributeResults *map[string]AttributeSuggestion `json:"attributeResults,omitempty"`
	// SiteFilter object used with request.
	SiteFilter *string `json:"siteFilter,omitempty"`
}

// NewSearchResults instantiates a new SearchResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResults(searchTerms []SearchTerms) *SearchResults {
	this := SearchResults{}
	this.SearchTerms = searchTerms
	return &this
}

// NewSearchResultsWithDefaults instantiates a new SearchResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultsWithDefaults() *SearchResults {
	this := SearchResults{}
	return &this
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *SearchResults) GetStats() SearchResultsStats {
	if o == nil || IsNil(o.Stats) {
		var ret SearchResultsStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetStatsOk() (*SearchResultsStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *SearchResults) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given SearchResultsStats and assigns it to the Stats field.
func (o *SearchResults) SetStats(v SearchResultsStats) {
	o.Stats = &v
}

// GetSearchTerms returns the SearchTerms field value
func (o *SearchResults) GetSearchTerms() []SearchTerms {
	if o == nil {
		var ret []SearchTerms
		return ret
	}

	return o.SearchTerms
}

// GetSearchTermsOk returns a tuple with the SearchTerms field value
// and a boolean to check if the value has been set.
func (o *SearchResults) GetSearchTermsOk() ([]SearchTerms, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchTerms, true
}

// SetSearchTerms sets field value
func (o *SearchResults) SetSearchTerms(v []SearchTerms) {
	o.SearchTerms = v
}

// GetExtendedAttributes returns the ExtendedAttributes field value if set, zero value otherwise.
func (o *SearchResults) GetExtendedAttributes() map[string][]string {
	if o == nil || IsNil(o.ExtendedAttributes) {
		var ret map[string][]string
		return ret
	}
	return *o.ExtendedAttributes
}

// GetExtendedAttributesOk returns a tuple with the ExtendedAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetExtendedAttributesOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.ExtendedAttributes) {
		return nil, false
	}
	return o.ExtendedAttributes, true
}

// HasExtendedAttributes returns a boolean if a field has been set.
func (o *SearchResults) HasExtendedAttributes() bool {
	if o != nil && !IsNil(o.ExtendedAttributes) {
		return true
	}

	return false
}

// SetExtendedAttributes gets a reference to the given map[string][]string and assigns it to the ExtendedAttributes field.
func (o *SearchResults) SetExtendedAttributes(v map[string][]string) {
	o.ExtendedAttributes = &v
}

// GetAttributeResults returns the AttributeResults field value if set, zero value otherwise.
func (o *SearchResults) GetAttributeResults() map[string]AttributeSuggestion {
	if o == nil || IsNil(o.AttributeResults) {
		var ret map[string]AttributeSuggestion
		return ret
	}
	return *o.AttributeResults
}

// GetAttributeResultsOk returns a tuple with the AttributeResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetAttributeResultsOk() (*map[string]AttributeSuggestion, bool) {
	if o == nil || IsNil(o.AttributeResults) {
		return nil, false
	}
	return o.AttributeResults, true
}

// HasAttributeResults returns a boolean if a field has been set.
func (o *SearchResults) HasAttributeResults() bool {
	if o != nil && !IsNil(o.AttributeResults) {
		return true
	}

	return false
}

// SetAttributeResults gets a reference to the given map[string]AttributeSuggestion and assigns it to the AttributeResults field.
func (o *SearchResults) SetAttributeResults(v map[string]AttributeSuggestion) {
	o.AttributeResults = &v
}

// GetSiteFilter returns the SiteFilter field value if set, zero value otherwise.
func (o *SearchResults) GetSiteFilter() string {
	if o == nil || IsNil(o.SiteFilter) {
		var ret string
		return ret
	}
	return *o.SiteFilter
}

// GetSiteFilterOk returns a tuple with the SiteFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetSiteFilterOk() (*string, bool) {
	if o == nil || IsNil(o.SiteFilter) {
		return nil, false
	}
	return o.SiteFilter, true
}

// HasSiteFilter returns a boolean if a field has been set.
func (o *SearchResults) HasSiteFilter() bool {
	if o != nil && !IsNil(o.SiteFilter) {
		return true
	}

	return false
}

// SetSiteFilter gets a reference to the given string and assigns it to the SiteFilter field.
func (o *SearchResults) SetSiteFilter(v string) {
	o.SiteFilter = &v
}

func (o SearchResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	toSerialize["searchTerms"] = o.SearchTerms
	if !IsNil(o.ExtendedAttributes) {
		toSerialize["extendedAttributes"] = o.ExtendedAttributes
	}
	if !IsNil(o.AttributeResults) {
		toSerialize["attributeResults"] = o.AttributeResults
	}
	if !IsNil(o.SiteFilter) {
		toSerialize["siteFilter"] = o.SiteFilter
	}
	return toSerialize, nil
}

type NullableSearchResults struct {
	value *SearchResults
	isSet bool
}

func (v NullableSearchResults) Get() *SearchResults {
	return v.value
}

func (v *NullableSearchResults) Set(val *SearchResults) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResults) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResults(val *SearchResults) *NullableSearchResults {
	return &NullableSearchResults{value: val, isSet: true}
}

func (v NullableSearchResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


